

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Aug 07 14:31:13 2020

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F25K83
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=4,class=CODE,delta=1
    24                           	psect	text13,global,reloc=4,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=4,class=CODE,delta=1
    27                           	psect	text16,global,reloc=4,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=4,class=CODE,delta=1
    30                           	psect	ivt0x8,global,reloc=2,class=CODE,delta=1,noexec,keep,optim=
    31                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    32                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    33  0000                     
    34                           ; Version 2.05
    35                           ; Generated 20/12/2018 GMT
    36                           ; 
    37                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F25K83 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     
    69                           	psect	idataCOMRAM
    70  000EF4                     __pidataCOMRAM:
    71                           	opt callstack 0
    72                           
    73                           ;initializer for _feedback
    74  000EF4  0001               	dw	1
    75                           
    76                           ;initializer for _status
    77  000EF6  0001               	dw	1
    78                           
    79                           ;initializer for _max_tick_count
    80  000EF8  0001               	dw	1
    81  0000                     _TXB0DLCbits	set	14309
    82  0000                     _TXB0SIDH	set	14305
    83  0000                     _TXB0SIDLbits	set	14306
    84  0000                     _TXB0D7	set	14317
    85  0000                     _TXB0D6	set	14316
    86  0000                     _TXB0D5	set	14315
    87  0000                     _TXB0D4	set	14314
    88  0000                     _TXB0D3	set	14313
    89  0000                     _TXB0D2	set	14312
    90  0000                     _TXB0D1	set	14311
    91  0000                     _TXB0D0	set	14310
    92  0000                     _TXB0CONbits	set	14304
    93  0000                     _RXB1CONbits	set	14320
    94  0000                     _RXM1SIDLbits	set	14269
    95  0000                     _RXM1SIDH	set	14268
    96  0000                     _RXF1SIDLbits	set	14245
    97  0000                     _RXF1SIDH	set	14244
    98  0000                     _RXM0SIDLbits	set	14265
    99  0000                     _RXM0SIDH	set	14264
   100  0000                     _RXF0SIDLbits	set	14241
   101  0000                     _RXF0SIDH	set	14240
   102  0000                     _BRGCON1bits	set	14083
   103  0000                     _PIE3bits	set	14739
   104  0000                     _PIR5bits	set	14757
   105  0000                     _PIR3bits	set	14755
   106  0000                     _PIE5bits	set	14741
   107  0000                     _PIR1bits	set	14753
   108  0000                     _PIE1bits	set	14737
   109  0000                     _OSCCON1	set	14809
   110  0000                     _RB2PPS	set	14858
   111  0000                     _ANSELC	set	14944
   112  0000                     _ANSELBbits	set	14928
   113  0000                     _INT0PPS	set	15040
   114  0000                     _ANSELAbits	set	14912
   115  0000                     _ADRESL	set	16111
   116  0000                     _ADRESH	set	16112
   117  0000                     _ADCON0bits	set	16120
   118  0000                     _ADPCHbits	set	16113
   119  0000                     _TMR0H	set	16311
   120  0000                     _TMR0L	set	16310
   121  0000                     _T0CON1bits	set	16313
   122  0000                     _CANSTATbits	set	16270
   123  0000                     _CANCONbits	set	16271
   124  0000                     _TRISC	set	16324
   125  0000                     _PORTCbits	set	16332
   126  0000                     _RXB0D0	set	16262
   127  0000                     _RXB0CONbits	set	16256
   128  0000                     _PORTAbits	set	16330
   129  0000                     _T0CON0bits	set	16312
   130  0000                     _PORTBbits	set	16331
   131  0000                     _TRISBbits	set	16323
   132  0000                     _INTCON0bits	set	16338
   133  0000                     _TRISAbits	set	16322
   134                           
   135                           	psect	smallconst
   136  000800                     __psmallconst:
   137                           	opt callstack 0
   138  000800  00                 	db	0
   139  000801                     STR_1:
   140                           
   141                           ; BSR set to: 57
   142  000801  57                 	db	87	;'W'
   143  000802  65                 	db	101	;'e'
   144  000803  6C                 	db	108	;'l'
   145  000804  63                 	db	99	;'c'
   146  000805  6F                 	db	111	;'o'
   147  000806  6D                 	db	109	;'m'
   148  000807  65                 	db	101	;'e'
   149  000808  20                 	db	32
   150  000809  74                 	db	116	;'t'
   151  00080A  6F                 	db	111	;'o'
   152  00080B  20                 	db	32
   153  00080C  74                 	db	116	;'t'
   154  00080D  68                 	db	104	;'h'
   155  00080E  65                 	db	101	;'e'
   156  00080F  20                 	db	32
   157  000810  72                 	db	114	;'r'
   158  000811  6F                 	db	111	;'o'
   159  000812  62                 	db	98	;'b'
   160  000813  6F                 	db	111	;'o'
   161  000814  74                 	db	116	;'t'
   162  000815  00                 	db	0
   163  000816  00                 	db	0
   164  000817                     STR_5:
   165                           
   166                           ; BSR set to: 57
   167  000817  45                 	db	69	;'E'
   168  000818  78                 	db	120	;'x'
   169  000819  65                 	db	101	;'e'
   170  00081A  63                 	db	99	;'c'
   171  00081B  75                 	db	117	;'u'
   172  00081C  74                 	db	116	;'t'
   173  00081D  69                 	db	105	;'i'
   174  00081E  6E                 	db	110	;'n'
   175  00081F  67                 	db	103	;'g'
   176  000820  20                 	db	32
   177  000821  73                 	db	115	;'s'
   178  000822  65                 	db	101	;'e'
   179  000823  6C                 	db	108	;'l'
   180  000824  66                 	db	102	;'f'
   181  000825  74                 	db	116	;'t'
   182  000826  65                 	db	101	;'e'
   183  000827  73                 	db	115	;'s'
   184  000828  74                 	db	116	;'t'
   185  000829  00                 	db	0
   186  00082A  00                 	db	0
   187  00082B                     STR_2:
   188                           
   189                           ; BSR set to: 57
   190  00082B  45                 	db	69	;'E'
   191  00082C  78                 	db	120	;'x'
   192  00082D  65                 	db	101	;'e'
   193  00082E  63                 	db	99	;'c'
   194  00082F  75                 	db	117	;'u'
   195  000830  74                 	db	116	;'t'
   196  000831  65                 	db	101	;'e'
   197  000832  20                 	db	32
   198  000833  73                 	db	115	;'s'
   199  000834  65                 	db	101	;'e'
   200  000835  6C                 	db	108	;'l'
   201  000836  66                 	db	102	;'f'
   202  000837  74                 	db	116	;'t'
   203  000838  65                 	db	101	;'e'
   204  000839  73                 	db	115	;'s'
   205  00083A  74                 	db	116	;'t'
   206  00083B  3F                 	db	63	;'?'
   207  00083C  00                 	db	0
   208  00083D                     STR_3:
   209                           
   210                           ; BSR set to: 57
   211  00083D  52                 	db	82	;'R'
   212  00083E  6F                 	db	111	;'o'
   213  00083F  62                 	db	98	;'b'
   214  000840  6F                 	db	111	;'o'
   215  000841  74                 	db	116	;'t'
   216  000842  20                 	db	32
   217  000843  77                 	db	119	;'w'
   218  000844  69                 	db	105	;'i'
   219  000845  6C                 	db	108	;'l'
   220  000846  6C                 	db	108	;'l'
   221  000847  20                 	db	32
   222  000848  6D                 	db	109	;'m'
   223  000849  6F                 	db	111	;'o'
   224  00084A  76                 	db	118	;'v'
   225  00084B  65                 	db	101	;'e'
   226  00084C  00                 	db	0
   227  00084D  00                 	db	0
   228  00084E                     
   229                           ; BSR set to: 57
   230  00084E  53                 	db	83	;'S'
   231  00084F  65                 	db	101	;'e'
   232  000850  6C                 	db	108	;'l'
   233  000851  66                 	db	102	;'f'
   234  000852  74                 	db	116	;'t'
   235  000853  65                 	db	101	;'e'
   236  000854  73                 	db	115	;'s'
   237  000855  74                 	db	116	;'t'
   238  000856  20                 	db	32
   239  000857  77                 	db	119	;'w'
   240  000858  61                 	db	97	;'a'
   241  000859  73                 	db	115	;'s'
   242  00085A  20                 	db	32
   243  00085B  6F                 	db	111	;'o'
   244  00085C  6B                 	db	107	;'k'
   245  00085D  21                 	db	33
   246  00085E  00                 	db	0
   247  00085F                     STR_8:
   248                           
   249                           ; BSR set to: 57
   250  00085F  53                 	db	83	;'S'
   251  000860  74                 	db	116	;'t'
   252  000861  61                 	db	97	;'a'
   253  000862  72                 	db	114	;'r'
   254  000863  74                 	db	116	;'t'
   255  000864  69                 	db	105	;'i'
   256  000865  6E                 	db	110	;'n'
   257  000866  67                 	db	103	;'g'
   258  000867  20                 	db	32
   259  000868  6D                 	db	109	;'m'
   260  000869  6F                 	db	111	;'o'
   261  00086A  77                 	db	119	;'w'
   262  00086B  65                 	db	101	;'e'
   263  00086C  72                 	db	114	;'r'
   264  00086D  21                 	db	33
   265  00086E  00                 	db	0
   266  00086F                     STR_4:
   267                           
   268                           ; BSR set to: 57
   269  00086F  41                 	db	65	;'A'
   270  000870  72                 	db	114	;'r'
   271  000871  65                 	db	101	;'e'
   272  000872  20                 	db	32
   273  000873  79                 	db	121	;'y'
   274  000874  6F                 	db	111	;'o'
   275  000875  75                 	db	117	;'u'
   276  000876  20                 	db	32
   277  000877  73                 	db	115	;'s'
   278  000878  75                 	db	117	;'u'
   279  000879  72                 	db	114	;'r'
   280  00087A  65                 	db	101	;'e'
   281  00087B  3F                 	db	63	;'?'
   282  00087C  3F                 	db	63	;'?'
   283  00087D  00                 	db	0
   284  00087E                     STR_6:
   285                           
   286                           ; BSR set to: 57
   287  00087E  2E                 	db	46
   288  00087F  2E                 	db	46
   289  000880  2E                 	db	46
   290  000881  2E                 	db	46
   291  000882  2E                 	db	46
   292  000883  2E                 	db	46
   293  000884  2E                 	db	46
   294  000885  00                 	db	0
   295  000886                     STR_11:
   296                           
   297                           ; BSR set to: 57
   298  000886  20                 	db	32
   299  000887  59                 	db	89	;'Y'
   300  000888  65                 	db	101	;'e'
   301  000889  73                 	db	115	;'s'
   302  00088A  20                 	db	32
   303  00088B  00                 	db	0
   304  00088C                     STR_13:
   305                           
   306                           ; BSR set to: 57
   307  00088C  45                 	db	69	;'E'
   308  00088D  72                 	db	114	;'r'
   309  00088E  72                 	db	114	;'r'
   310  00088F  6F                 	db	111	;'o'
   311  000890  72                 	db	114	;'r'
   312  000891  00                 	db	0
   313  000892                     STR_9:
   314                           
   315                           ; BSR set to: 57
   316  000892  7C                 	db	124
   317  000893  59                 	db	89	;'Y'
   318  000894  65                 	db	101	;'e'
   319  000895  73                 	db	115	;'s'
   320  000896  7C                 	db	124
   321  000897  00                 	db	0
   322  000898                     STR_10:
   323                           
   324                           ; BSR set to: 57
   325  000898  20                 	db	32
   326  000899  4E                 	db	78	;'N'
   327  00089A  6F                 	db	111	;'o'
   328  00089B  20                 	db	32
   329  00089C  00                 	db	0
   330  00089D                     STR_12:
   331                           
   332                           ; BSR set to: 57
   333  00089D  7C                 	db	124
   334  00089E  4E                 	db	78	;'N'
   335  00089F  6F                 	db	111	;'o'
   336  0008A0  7C                 	db	124
   337  0008A1  00                 	db	0
   338                           
   339                           ; #config settings
   340  0008A2  00                 	db	0	; dummy byte at the end
   341  0000                     
   342                           	psect	cinit
   343  000D7C                     __pcinit:
   344                           	opt callstack 0
   345  000D7C                     start_initialization:
   346                           	opt callstack 0
   347  000D7C                     __initialization:
   348                           	opt callstack 0
   349                           
   350                           ; Initialize objects allocated to COMRAM (6 bytes)
   351                           ; load TBLPTR registers with __pidataCOMRAM
   352  000D7C  0EF4               	movlw	low __pidataCOMRAM
   353  000D7E  6EF6               	movwf	tblptrl,c
   354  000D80  0E0E               	movlw	high __pidataCOMRAM
   355  000D82  6EF7               	movwf	tblptrh,c
   356  000D84  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   357  000D86  6EF8               	movwf	tblptru,c
   358  000D88  EE00  F036         	lfsr	0,__pdataCOMRAM
   359  000D8C  EE10 F006          	lfsr	1,6
   360  000D90                     copy_data0:
   361  000D90  0009               	tblrd		*+
   362  000D92  006F FFD7 FFEE     	movff	tablat,postinc0
   363  000D98  50E5               	movf	postdec1,w,c
   364  000D9A  50E1               	movf	fsr1l,w,c
   365  000D9C  E1F9               	bnz	copy_data0
   366                           
   367                           ; Clear objects allocated to COMRAM (12 bytes)
   368  000D9E  EE00  F02A         	lfsr	0,__pbssCOMRAM
   369  000DA2  0E0C               	movlw	12
   370  000DA4                     clear_0:
   371  000DA4  6AEE               	clrf	postinc0,c
   372  000DA6  06E8               	decf	wreg,f,c
   373  000DA8  E1FD               	bnz	clear_0
   374                           
   375                           ;
   376                           ; Setup IVTBASE
   377                           ;
   378  000DAA  0E08               	movlw	(ivt0x8_base shr 0)& (0+255)
   379  000DAC  6ED5               	movwf	213,c
   380  000DAE  0E00               	movlw	(ivt0x8_base shr (0+8))& (0+255)
   381  000DB0  6ED6               	movwf	214,c
   382  000DB2  0E00               	movlw	(ivt0x8_base shr (0+16))& (0+255)
   383  000DB4  6ED7               	movwf	215,c
   384  000DB6                     end_of_initialization:
   385                           	opt callstack 0
   386  000DB6                     __end_of__initialization:
   387                           	opt callstack 0
   388  000DB6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   389  000DB8  6EF8               	movwf	tblptru,c
   390  000DBA  0100               	movlb	0
   391  000DBC  EF52  F004         	goto	_main	;jump to C main() function
   392                           
   393                           	psect	bssCOMRAM
   394  00002A                     __pbssCOMRAM:
   395                           	opt callstack 0
   396  00002A                     _min_tick_count:
   397                           	opt callstack 0
   398  00002A                     	ds	2
   399  00002C                     _tick_count:
   400                           	opt callstack 0
   401  00002C                     	ds	2
   402  00002E                     _ADCvalueLow1:
   403                           	opt callstack 0
   404  00002E                     	ds	2
   405  000030                     _ADCvalueHigh1:
   406                           	opt callstack 0
   407  000030                     	ds	2
   408  000032                     _ADCvalueLow0:
   409                           	opt callstack 0
   410  000032                     	ds	2
   411  000034                     _ADCvalueHigh0:
   412                           	opt callstack 0
   413  000034                     	ds	2
   414                           
   415                           	psect	dataCOMRAM
   416  000036                     __pdataCOMRAM:
   417                           	opt callstack 0
   418  000036                     _feedback:
   419                           	opt callstack 0
   420  000036                     	ds	2
   421  000038                     _status:
   422                           	opt callstack 0
   423  000038                     	ds	2
   424  00003A                     _max_tick_count:
   425                           	opt callstack 0
   426  00003A                     	ds	2
   427                           
   428                           	psect	cstackCOMRAM
   429  000001                     __pcstackCOMRAM:
   430                           	opt callstack 0
   431  000001                     ??_encInt:
   432  000001                     
   433                           ; 1 bytes @ 0x0
   434  000001                     	ds	1
   435  000002                     sendCANmessage@id:
   436                           	opt callstack 0
   437                           
   438                           ; 2 bytes @ 0x1
   439  000002                     	ds	2
   440  000004                     sendCANmessage@message:
   441                           	opt callstack 0
   442                           
   443                           ; 2 bytes @ 0x3
   444  000004                     	ds	2
   445  000006                     sendCANmessage@length:
   446                           	opt callstack 0
   447                           
   448                           ; 2 bytes @ 0x5
   449  000006                     	ds	2
   450  000008                     ??_sendCANmessage:
   451                           
   452                           ; 1 bytes @ 0x7
   453  000008                     	ds	2
   454  00000A                     ??_canRecInt2:
   455                           
   456                           ; 1 bytes @ 0x9
   457  00000A                     	ds	2
   458  00000C                     canRecInt2@message:
   459                           	opt callstack 0
   460                           
   461                           ; 16 bytes @ 0xB
   462  00000C                     	ds	16
   463  00001C                     Lcd_Port@a:
   464                           	opt callstack 0
   465                           
   466                           ; 1 bytes @ 0x1B
   467  00001C                     	ds	1
   468  00001D                     ??_Lcd_Cmd:
   469  00001D                     Lcd_Write_Char@temp:
   470                           	opt callstack 0
   471                           
   472                           ; 1 bytes @ 0x1C
   473  00001D                     	ds	1
   474  00001E                     Lcd_Cmd@a:
   475                           	opt callstack 0
   476  00001E                     Lcd_Write_Char@y:
   477                           	opt callstack 0
   478                           
   479                           ; 1 bytes @ 0x1D
   480  00001E                     	ds	1
   481  00001F                     ??_Lcd_Init:
   482  00001F                     Lcd_Set_Cursor@b:
   483                           	opt callstack 0
   484  00001F                     Lcd_Write_Char@a:
   485                           	opt callstack 0
   486                           
   487                           ; 1 bytes @ 0x1E
   488  00001F                     	ds	1
   489  000020                     Lcd_Set_Cursor@a:
   490                           	opt callstack 0
   491  000020                     Lcd_Write_String@a:
   492                           	opt callstack 0
   493                           
   494                           ; 2 bytes @ 0x1F
   495  000020                     	ds	1
   496  000021                     Lcd_Set_Cursor@z:
   497                           	opt callstack 0
   498                           
   499                           ; 1 bytes @ 0x20
   500  000021                     	ds	1
   501  000022                     ??_Lcd_Write_String:
   502  000022                     Lcd_Set_Cursor@y:
   503                           	opt callstack 0
   504                           
   505                           ; 1 bytes @ 0x21
   506  000022                     	ds	1
   507  000023                     Lcd_Set_Cursor@temp:
   508                           	opt callstack 0
   509                           
   510                           ; 1 bytes @ 0x22
   511  000023                     	ds	1
   512  000024                     Lcd_Write_String@i:
   513                           	opt callstack 0
   514                           
   515                           ; 2 bytes @ 0x23
   516  000024                     	ds	2
   517  000026                     ??_MenuYesNo:
   518                           
   519                           ; 1 bytes @ 0x25
   520  000026                     	ds	4
   521  00002A                     
   522                           ; 1 bytes @ 0x29
   523 ;;
   524 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   525 ;;
   526 ;; *************** function _main *****************
   527 ;; Defined at:
   528 ;;		line 94 in file "MainCode.c"
   529 ;; Parameters:    Size  Location     Type
   530 ;;		None
   531 ;; Auto vars:     Size  Location     Type
   532 ;;		None
   533 ;; Return value:  Size  Location     Type
   534 ;;                  1    wreg      void 
   535 ;; Registers used:
   536 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   537 ;; Tracked objects:
   538 ;;		On entry : 0/0
   539 ;;		On exit  : 0/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   542 ;;      Params:         0       0       0       0       0       0       0       0       0
   543 ;;      Locals:         0       0       0       0       0       0       0       0       0
   544 ;;      Temps:          0       0       0       0       0       0       0       0       0
   545 ;;      Totals:         0       0       0       0       0       0       0       0       0
   546 ;;Total ram usage:        0 bytes
   547 ;; Hardware stack levels required when called:    7
   548 ;; This function calls:
   549 ;;		_Lcd_Clear
   550 ;;		_Lcd_Init
   551 ;;		_Lcd_Set_Cursor
   552 ;;		_Lcd_Write_String
   553 ;;		_MenuYesNo
   554 ;;		_initBuzzer
   555 ;;		_initCAN
   556 ;; This function is called by:
   557 ;;		Startup code after reset
   558 ;; This function uses a non-reentrant model
   559 ;;
   560                           
   561                           	psect	text0
   562  0008A4                     __ptext0:
   563                           	opt callstack 0
   564  0008A4                     _main:
   565                           	opt callstack 24
   566                           
   567                           ;MainCode.c: 96:     Lcd_Clear();
   568                           
   569                           ;incstack = 0
   570  0008A4  0E60               	movlw	96
   571  0008A6  0139               	movlb	57	; () banked
   572  0008A8  6FD9               	movwf	217,b	;volatile
   573                           
   574                           ; BSR set to: 57
   575                           ;MainCode.c: 97:     Lcd_Set_Cursor(1,1);
   576  0008AA  EC2E  F006         	call	_initCAN	;wreg free
   577                           
   578                           ;MainCode.c: 98:     Lcd_Write_String("Selftest was ok!");
   579  0008AE  EC1E  F007         	call	_initBuzzer	;wreg free
   580                           
   581                           ;MainCode.c: 100:     mower:
   582  0008B2  013A               	movlb	58	; () banked
   583  0008B4  9140               	bcf	64,0,b	;volatile
   584                           
   585                           ; BSR set to: 58
   586                           ;MainCode.c: 101:     Lcd_Clear();
   587  0008B6  9340               	bcf	64,1,b	;volatile
   588                           
   589                           ; BSR set to: 58
   590                           ;MainCode.c: 102:     Lcd_Set_Cursor(1,1);
   591  0008B8  9540               	bcf	64,2,b	;volatile
   592                           
   593                           ; BSR set to: 58
   594                           ;MainCode.c: 103:     Lcd_Write_String("Starting mower!");
   595  0008BA  0E01               	movlw	1
   596  0008BC  6FC0               	movwf	192,b	;volatile
   597                           
   598                           ; BSR set to: 58
   599                           ;MainCode.c: 104:     while(1);
   600  0008BE  80C2               	bsf	16322,0,c	;volatile
   601                           
   602                           ; BSR set to: 58
   603                           ;MainCode.c: 105: }
   604  0008C0  82C2               	bsf	16322,1,c	;volatile
   605                           
   606                           ; BSR set to: 58
   607                           ;MainCode.c: 106: 
   608  0008C2  84C2               	bsf	16322,2,c	;volatile
   609                           
   610                           ; BSR set to: 58
   611                           ;MainCode.c: 107: 
   612  0008C4  0139               	movlb	57	; () banked
   613  0008C6  8191               	bsf	145,0,b	;volatile
   614                           
   615                           ; BSR set to: 57
   616                           ;MainCode.c: 108: void __attribute__((picinterrupt(("irq(TMR0), low_priority")))) buzzer
      +                          Int(void) {
   617  0008C8  91A1               	bcf	161,0,b	;volatile
   618                           
   619                           ; BSR set to: 57
   620                           ;MainCode.c: 109:     PORTBbits.RB1 = 0;
   621  0008CA  80D2               	bsf	16338,0,c	;volatile
   622                           
   623                           ; BSR set to: 57
   624                           ;MainCode.c: 111:     PIR3bits.TMR0IF = 0;
   625  0008CC  8CD2               	bsf	16338,6,c	;volatile
   626                           
   627                           ; BSR set to: 57
   628                           ;MainCode.c: 112: }
   629  0008CE  8ED2               	bsf	16338,7,c	;volatile
   630                           
   631                           ; BSR set to: 57
   632                           ;MainCode.c: 114: void __attribute__((picinterrupt(("irq(INT0), high_priority")))) encIn
      +                          t(void) {
   633  0008D0  9AD2               	bcf	16338,5,c	;volatile
   634                           
   635                           ; BSR set to: 57
   636                           ;MainCode.c: 116:     {
   637  0008D2  8195               	bsf	149,0,b	;volatile
   638                           
   639                           ; BSR set to: 57
   640                           ;MainCode.c: 117:         if(tick_count > min_tick_count) {
   641  0008D4  9395               	bcf	149,1,b	;volatile
   642                           
   643                           ; BSR set to: 57
   644                           ;MainCode.c: 121:     }
   645  0008D6  8ED2               	bsf	16338,7,c	;volatile
   646                           
   647                           ; BSR set to: 57
   648                           ;MainCode.c: 122:     else
   649  0008D8  90C3               	bcf	16323,0,c	;volatile
   650                           
   651                           ; BSR set to: 57
   652                           ;MainCode.c: 123:     {
   653  0008DA  013A               	movlb	58	; () banked
   654  0008DC  9150               	bcf	80,0,b	;volatile
   655                           
   656                           ; BSR set to: 58
   657                           ;MainCode.c: 124:         if(tick_count < max_tick_count) {
   658  0008DE  80CB               	bsf	16331,0,c	;volatile
   659                           
   660                           ; BSR set to: 58
   661                           ;MainCode.c: 126:             playBuzzer();
   662  0008E0  ECE8  F005         	call	_Lcd_Init	;wreg free
   663  0008E4                     l1535:
   664                           
   665                           ;MainCode.c: 129:     PIR1bits.INT0IF = 0;
   666  0008E4  EC5D  F007         	call	_Lcd_Clear	;wreg free
   667                           
   668                           ;MainCode.c: 131: 
   669  0008E8  0E01               	movlw	1
   670  0008EA  6E1F               	movwf	Lcd_Set_Cursor@b,c
   671  0008EC  0E01               	movlw	1
   672  0008EE  EC98  F005         	call	_Lcd_Set_Cursor
   673                           
   674                           ;MainCode.c: 133: 
   675  0008F2  0E01               	movlw	low STR_1
   676  0008F4  6E20               	movwf	Lcd_Write_String@a,c
   677  0008F6  0E08               	movlw	high STR_1
   678  0008F8  6E21               	movwf	Lcd_Write_String@a+1,c
   679  0008FA  EC95  F006         	call	_Lcd_Write_String	;wreg free
   680                           
   681                           ;MainCode.c: 135: 
   682  0008FE  0E01               	movlw	1
   683  000900  6E1F               	movwf	Lcd_Set_Cursor@b,c
   684  000902  0E02               	movlw	2
   685  000904  EC98  F005         	call	_Lcd_Set_Cursor
   686                           
   687                           ;MainCode.c: 136: }
   688  000908  0E2B               	movlw	low STR_2
   689  00090A  6E20               	movwf	Lcd_Write_String@a,c
   690  00090C  0E08               	movlw	high STR_2
   691  00090E  6E21               	movwf	Lcd_Write_String@a+1,c
   692  000910  EC95  F006         	call	_Lcd_Write_String	;wreg free
   693                           
   694                           ;MainCode.c: 137: 
   695  000914  EC44  F005         	call	_MenuYesNo	;wreg free
   696                           
   697                           ;MainCode.c: 138: void __attribute__((picinterrupt(("irq(RXB0IF), high_priority")))) can
      +                          RecInt2(void) {
   698  000918  042C               	decf	_tick_count,w,c
   699  00091A  102D               	iorwf	_tick_count+1,w,c
   700  00091C  B4D8               	btfsc	status,2,c
   701  00091E  D03B               	goto	l1587
   702                           
   703                           ;MainCode.c: 139:     if (RXB0CONbits.RXFUL == 1) {
   704  000920  EC5D  F007         	call	_Lcd_Clear	;wreg free
   705                           
   706                           ;MainCode.c: 140: 
   707  000924  0E01               	movlw	1
   708  000926  6E1F               	movwf	Lcd_Set_Cursor@b,c
   709  000928  0E01               	movlw	1
   710  00092A  EC98  F005         	call	_Lcd_Set_Cursor
   711                           
   712                           ;MainCode.c: 141: 
   713  00092E  0E3D               	movlw	low STR_3
   714  000930  6E20               	movwf	Lcd_Write_String@a,c
   715  000932  0E08               	movlw	high STR_3
   716  000934  6E21               	movwf	Lcd_Write_String@a+1,c
   717  000936  EC95  F006         	call	_Lcd_Write_String	;wreg free
   718                           
   719                           ;MainCode.c: 142:         int message[8];
   720  00093A  0E01               	movlw	1
   721  00093C  6E1F               	movwf	Lcd_Set_Cursor@b,c
   722  00093E  0E02               	movlw	2
   723  000940  EC98  F005         	call	_Lcd_Set_Cursor
   724                           
   725                           ;MainCode.c: 143:         switch (RXB0D0) {
   726  000944  0E6F               	movlw	low STR_4
   727  000946  6E20               	movwf	Lcd_Write_String@a,c
   728  000948  0E08               	movlw	high STR_4
   729  00094A  6E21               	movwf	Lcd_Write_String@a+1,c
   730  00094C  EC95  F006         	call	_Lcd_Write_String	;wreg free
   731                           
   732                           ;MainCode.c: 144: 
   733  000950  EC44  F005         	call	_MenuYesNo	;wreg free
   734                           
   735                           ;MainCode.c: 145: 
   736  000954  042C               	decf	_tick_count,w,c
   737  000956  102D               	iorwf	_tick_count+1,w,c
   738  000958  B4D8               	btfsc	status,2,c
   739  00095A  D7C4               	goto	l1535
   740                           
   741                           ;MainCode.c: 147:                 message[0] = tick_count;
   742  00095C  0E00               	movlw	0
   743  00095E  6E39               	movwf	_status+1,c
   744  000960  0E02               	movlw	2
   745  000962  6E38               	movwf	_status,c
   746                           
   747                           ;MainCode.c: 148:                 sendCANmessage(0, message, 1);
   748  000964  EC5D  F007         	call	_Lcd_Clear	;wreg free
   749                           
   750                           ;MainCode.c: 149:                 break;
   751  000968  0E01               	movlw	1
   752  00096A  6E1F               	movwf	Lcd_Set_Cursor@b,c
   753  00096C  0E01               	movlw	1
   754  00096E  EC98  F005         	call	_Lcd_Set_Cursor
   755                           
   756                           ;MainCode.c: 150:             case 1:
   757  000972  0E17               	movlw	low STR_5
   758  000974  6E20               	movwf	Lcd_Write_String@a,c
   759  000976  0E08               	movlw	high STR_5
   760  000978  6E21               	movwf	Lcd_Write_String@a+1,c
   761  00097A  EC95  F006         	call	_Lcd_Write_String	;wreg free
   762                           
   763                           ;MainCode.c: 151:                 message[0] = status;
   764  00097E  0E01               	movlw	1
   765  000980  6E1F               	movwf	Lcd_Set_Cursor@b,c
   766  000982  0E02               	movlw	2
   767  000984  EC98  F005         	call	_Lcd_Set_Cursor
   768                           
   769                           ;MainCode.c: 152:                 sendCANmessage(0, message, 1);
   770  000988  0E7E               	movlw	low STR_6
   771  00098A  6E20               	movwf	Lcd_Write_String@a,c
   772  00098C  0E08               	movlw	high STR_6
   773  00098E  6E21               	movwf	Lcd_Write_String@a+1,c
   774  000990  EC95  F006         	call	_Lcd_Write_String	;wreg free
   775  000994                     l155:
   776  000994  D7FF               	goto	l155
   777  000996                     l1587:
   778  000996  EC5D  F007         	call	_Lcd_Clear	;wreg free
   779  00099A  0E01               	movlw	1
   780  00099C  6E1F               	movwf	Lcd_Set_Cursor@b,c
   781  00099E  0E01               	movlw	1
   782  0009A0  EC98  F005         	call	_Lcd_Set_Cursor
   783  0009A4  0E5F               	movlw	low STR_8
   784  0009A6  6E20               	movwf	Lcd_Write_String@a,c
   785  0009A8  0E08               	movlw	high STR_8
   786  0009AA  6E21               	movwf	Lcd_Write_String@a+1,c
   787  0009AC  EC95  F006         	call	_Lcd_Write_String	;wreg free
   788  0009B0                     l159:
   789  0009B0  D7FF               	goto	l159
   790  0009B2                     __end_of_main:
   791                           	opt callstack 0
   792                           
   793 ;; *************** function _initCAN *****************
   794 ;; Defined at:
   795 ;;		line 460 in file "MainCode.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;		None
   798 ;; Auto vars:     Size  Location     Type
   799 ;;		None
   800 ;; Return value:  Size  Location     Type
   801 ;;                  1    wreg      void 
   802 ;; Registers used:
   803 ;;		wreg, status,2, status,0
   804 ;; Tracked objects:
   805 ;;		On entry : 0/0
   806 ;;		On exit  : 0/0
   807 ;;		Unchanged: 0/0
   808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   809 ;;      Params:         0       0       0       0       0       0       0       0       0
   810 ;;      Locals:         0       0       0       0       0       0       0       0       0
   811 ;;      Temps:          0       0       0       0       0       0       0       0       0
   812 ;;      Totals:         0       0       0       0       0       0       0       0       0
   813 ;;Total ram usage:        0 bytes
   814 ;; Hardware stack levels used:    1
   815 ;; Hardware stack levels required when called:    3
   816 ;; This function calls:
   817 ;;		Nothing
   818 ;; This function is called by:
   819 ;;		_main
   820 ;; This function uses a non-reentrant model
   821 ;;
   822                           
   823                           	psect	text1
   824  000C5C                     __ptext1:
   825                           	opt callstack 0
   826  000C5C                     _initCAN:
   827                           	opt callstack 27
   828                           
   829                           ;MainCode.c: 465:     RB2PPS = 0b110011;
   830                           
   831                           ;incstack = 0
   832  000C5C  0E33               	movlw	51
   833  000C5E  013A               	movlb	58	; () banked
   834  000C60  6F0A               	movwf	10,b	;volatile
   835                           
   836                           ; BSR set to: 58
   837                           ;MainCode.c: 467:     TRISBbits.TRISB2 = 0;
   838  000C62  94C3               	bcf	16323,2,c	;volatile
   839                           
   840                           ; BSR set to: 58
   841                           ;MainCode.c: 468:     TRISBbits.TRISB3 = 1;
   842  000C64  86C3               	bsf	16323,3,c	;volatile
   843                           
   844                           ; BSR set to: 58
   845                           ;MainCode.c: 470:     ANSELBbits.ANSELB2 = 0;
   846  000C66  9550               	bcf	80,2,b	;volatile
   847                           
   848                           ; BSR set to: 58
   849                           ;MainCode.c: 471:     ANSELBbits.ANSELB3 = 0;
   850  000C68  9750               	bcf	80,3,b	;volatile
   851                           
   852                           ; BSR set to: 58
   853                           ;MainCode.c: 473:     CANCONbits.REQOP2 = 1;
   854  000C6A  8E8F               	bsf	16271,7,c	;volatile
   855                           
   856                           ; BSR set to: 58
   857                           ;MainCode.c: 474:     CANCONbits.REQOP1 = 0;
   858  000C6C  9C8F               	bcf	16271,6,c	;volatile
   859                           
   860                           ; BSR set to: 58
   861                           ;MainCode.c: 475:     CANCONbits.REQOP0 = 0;
   862  000C6E  9A8F               	bcf	16271,5,c	;volatile
   863  000C70                     l1067:
   864  000C70  388E               	swapf	16270,w,c	;volatile
   865  000C72  32E8               	rrcf	wreg,f,c
   866  000C74  0B07               	andlw	7
   867  000C76  0A04               	xorlw	4
   868  000C78  A4D8               	btfss	status,2,c
   869  000C7A  D7FA               	goto	l1067
   870                           
   871                           ;MainCode.c: 479:     BRGCON1bits.BRP = 0b011111;
   872  000C7C  0137               	movlb	55	; () banked
   873  000C7E  5103               	movf	3,w,b	;volatile
   874  000C80  0BC0               	andlw	-64
   875  000C82  091F               	iorlw	31
   876  000C84  6F03               	movwf	3,b	;volatile
   877                           
   878                           ;MainCode.c: 481:     RXF0SIDH = 0;
   879  000C86  0E00               	movlw	0
   880  000C88  6FA0               	movwf	160,b	;volatile
   881                           
   882                           ;MainCode.c: 482:     RXF0SIDLbits.SID = 2;
   883  000C8A  51A1               	movf	161,w,b	;volatile
   884  000C8C  0B1F               	andlw	-225
   885  000C8E  0940               	iorlw	64
   886  000C90  6FA1               	movwf	161,b	;volatile
   887                           
   888                           ; BSR set to: 55
   889                           ;MainCode.c: 483:     RXF0SIDLbits.EXIDEN = 0;
   890  000C92  97A1               	bcf	161,3,b	;volatile
   891                           
   892                           ; BSR set to: 55
   893                           ;MainCode.c: 484:     RXM0SIDH = 255;
   894  000C94  69B8               	setf	184,b	;volatile
   895                           
   896                           ;MainCode.c: 485:     RXM0SIDLbits.SID = 0b111;
   897  000C96  0EE0               	movlw	224
   898  000C98  13B9               	iorwf	185,f,b	;volatile
   899                           
   900                           ; BSR set to: 55
   901                           ;MainCode.c: 486:     RXB0CONbits.RXM1 = 0;
   902  000C9A  9C80               	bcf	16256,6,c	;volatile
   903                           
   904                           ; BSR set to: 55
   905                           ;MainCode.c: 487:     RXB0CONbits.RXM0 = 1;
   906  000C9C  8A80               	bsf	16256,5,c	;volatile
   907                           
   908                           ; BSR set to: 55
   909                           ;MainCode.c: 488:     RXB0CONbits.FILHIT0 = 0;
   910  000C9E  9080               	bcf	16256,0,c	;volatile
   911                           
   912                           ; BSR set to: 55
   913                           ;MainCode.c: 490:     RXF1SIDH = 255;
   914  000CA0  69A4               	setf	164,b	;volatile
   915                           
   916                           ;MainCode.c: 491:     RXF1SIDLbits.SID = 0b111;
   917  000CA2  0EE0               	movlw	224
   918  000CA4  13A5               	iorwf	165,f,b	;volatile
   919                           
   920                           ; BSR set to: 55
   921                           ;MainCode.c: 492:     RXF1SIDLbits.EXIDEN = 0;
   922  000CA6  97A5               	bcf	165,3,b	;volatile
   923                           
   924                           ; BSR set to: 55
   925                           ;MainCode.c: 493:     RXM1SIDH = 255;
   926  000CA8  69BC               	setf	188,b	;volatile
   927                           
   928                           ;MainCode.c: 494:     RXM1SIDLbits.SID = 0b111;
   929  000CAA  0EE0               	movlw	224
   930  000CAC  13BD               	iorwf	189,f,b	;volatile
   931                           
   932                           ; BSR set to: 55
   933                           ;MainCode.c: 495:     RXB1CONbits.RXM1 = 0;
   934  000CAE  9DF0               	bcf	240,6,b	;volatile
   935                           
   936                           ; BSR set to: 55
   937                           ;MainCode.c: 496:     RXB1CONbits.RXM0 = 1;
   938  000CB0  8BF0               	bsf	240,5,b	;volatile
   939                           
   940                           ; BSR set to: 55
   941                           ;MainCode.c: 497:     RXB1CONbits.FILHIT0 = 0;
   942  000CB2  91F0               	bcf	240,0,b	;volatile
   943                           
   944                           ;MainCode.c: 499:     CANCONbits.REQOP = 0b000;
   945  000CB4  0E1F               	movlw	-225
   946  000CB6  168F               	andwf	16271,f,c	;volatile
   947  000CB8                     l1093:
   948  000CB8  388E               	swapf	16270,w,c	;volatile
   949  000CBA  32E8               	rrcf	wreg,f,c
   950  000CBC  0B07               	andlw	7
   951  000CBE  0900               	iorlw	0
   952  000CC0  B4D8               	btfsc	status,2,c
   953  000CC2  0012               	return	
   954  000CC4  D7F9               	goto	l1093
   955  000CC6                     __end_of_initCAN:
   956                           	opt callstack 0
   957                           
   958 ;; *************** function _initBuzzer *****************
   959 ;; Defined at:
   960 ;;		line 540 in file "MainCode.c"
   961 ;; Parameters:    Size  Location     Type
   962 ;;		None
   963 ;; Auto vars:     Size  Location     Type
   964 ;;		None
   965 ;; Return value:  Size  Location     Type
   966 ;;                  1    wreg      void 
   967 ;; Registers used:
   968 ;;		wreg, status,2
   969 ;; Tracked objects:
   970 ;;		On entry : 0/0
   971 ;;		On exit  : 0/0
   972 ;;		Unchanged: 0/0
   973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   974 ;;      Params:         0       0       0       0       0       0       0       0       0
   975 ;;      Locals:         0       0       0       0       0       0       0       0       0
   976 ;;      Temps:          0       0       0       0       0       0       0       0       0
   977 ;;      Totals:         0       0       0       0       0       0       0       0       0
   978 ;;Total ram usage:        0 bytes
   979 ;; Hardware stack levels used:    1
   980 ;; Hardware stack levels required when called:    3
   981 ;; This function calls:
   982 ;;		Nothing
   983 ;; This function is called by:
   984 ;;		_main
   985 ;; This function uses a non-reentrant model
   986 ;;
   987                           
   988                           	psect	text2
   989  000E3C                     __ptext2:
   990                           	opt callstack 0
   991  000E3C                     _initBuzzer:
   992                           	opt callstack 27
   993                           
   994                           ;MainCode.c: 542:     ANSELBbits.ANSELB1 = 0;
   995                           
   996                           ;incstack = 0
   997  000E3C  013A               	movlb	58	; () banked
   998  000E3E  9350               	bcf	80,1,b	;volatile
   999                           
  1000                           ;MainCode.c: 543:     TRISBbits.TRISB1 = 0;
  1001  000E40  92C3               	bcf	16323,1,c	;volatile
  1002                           
  1003                           ;MainCode.c: 544:     PORTBbits.RB1 = 1;
  1004  000E42  82CB               	bsf	16331,1,c	;volatile
  1005                           
  1006                           ;MainCode.c: 545:     T0CON0bits.EN = 1;
  1007  000E44  8EB8               	bsf	16312,7,c	;volatile
  1008                           
  1009                           ;MainCode.c: 546:     T0CON0bits.MD16 = 0;
  1010  000E46  98B8               	bcf	16312,4,c	;volatile
  1011                           
  1012                           ; BSR set to: 58
  1013                           ;MainCode.c: 547:     T0CON0bits.OUTPS = 0;
  1014  000E48  0EF0               	movlw	-16
  1015  000E4A  16B8               	andwf	16312,f,c	;volatile
  1016                           
  1017                           ;MainCode.c: 548:     T0CON1bits.CS = 0b101;
  1018  000E4C  50B9               	movf	16313,w,c	;volatile
  1019  000E4E  0B1F               	andlw	-225
  1020  000E50  09A0               	iorlw	160
  1021  000E52  6EB9               	movwf	16313,c	;volatile
  1022                           
  1023                           ; BSR set to: 58
  1024                           ;MainCode.c: 549:     T0CON1bits.ASYNC = 1;
  1025  000E54  88B9               	bsf	16313,4,c	;volatile
  1026                           
  1027                           ;MainCode.c: 550:     T0CON1bits.CKPS = 0b1001;
  1028  000E56  50B9               	movf	16313,w,c	;volatile
  1029  000E58  0BF0               	andlw	-16
  1030  000E5A  0909               	iorlw	9
  1031  000E5C  6EB9               	movwf	16313,c	;volatile
  1032                           
  1033                           ;MainCode.c: 551:     TMR0L = 0;
  1034  000E5E  0E00               	movlw	0
  1035  000E60  6EB6               	movwf	16310,c	;volatile
  1036                           
  1037                           ;MainCode.c: 552:     TMR0H = 50;
  1038  000E62  0E32               	movlw	50
  1039  000E64  6EB7               	movwf	16311,c	;volatile
  1040                           
  1041                           ; BSR set to: 58
  1042                           ;MainCode.c: 553:     PIE3bits.TMR0IE = 1;
  1043  000E66  0139               	movlb	57	; () banked
  1044  000E68  8F93               	bsf	147,7,b	;volatile
  1045                           
  1046                           ; BSR set to: 57
  1047                           ;MainCode.c: 554:     PIR3bits.TMR0IF = 0;
  1048  000E6A  9FA3               	bcf	163,7,b	;volatile
  1049                           
  1050                           ; BSR set to: 57
  1051  000E6C  0012               	return		;funcret
  1052  000E6E                     __end_of_initBuzzer:
  1053                           	opt callstack 0
  1054                           
  1055 ;; *************** function _MenuYesNo *****************
  1056 ;; Defined at:
  1057 ;;		line 383 in file "MainCode.c"
  1058 ;; Parameters:    Size  Location     Type
  1059 ;;		None
  1060 ;; Auto vars:     Size  Location     Type
  1061 ;;  str            20    0        unsigned char [20]
  1062 ;;  value           2    0        unsigned int 
  1063 ;; Return value:  Size  Location     Type
  1064 ;;                  1    wreg      void 
  1065 ;; Registers used:
  1066 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1067 ;; Tracked objects:
  1068 ;;		On entry : 0/0
  1069 ;;		On exit  : 0/0
  1070 ;;		Unchanged: 0/0
  1071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1072 ;;      Params:         0       0       0       0       0       0       0       0       0
  1073 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1074 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1075 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1076 ;;Total ram usage:        4 bytes
  1077 ;; Hardware stack levels used:    1
  1078 ;; Hardware stack levels required when called:    6
  1079 ;; This function calls:
  1080 ;;		_Lcd_Set_Cursor
  1081 ;;		_Lcd_Write_String
  1082 ;;		_playBuzzer
  1083 ;; This function is called by:
  1084 ;;		_main
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text3
  1089  000A88                     __ptext3:
  1090                           	opt callstack 0
  1091  000A88                     _MenuYesNo:
  1092                           	opt callstack 24
  1093                           
  1094                           ;MainCode.c: 385:     while(PORTAbits.RA2)
  1095                           
  1096                           ; BSR set to: 57
  1097                           ;incstack = 0
  1098  000A88  D04C               	goto	l244
  1099  000A8A                     l1439:
  1100                           
  1101                           ;MainCode.c: 393:                 Lcd_Set_Cursor(3,2);
  1102  000A8A  0E02               	movlw	2
  1103  000A8C  6E1F               	movwf	Lcd_Set_Cursor@b,c
  1104  000A8E  0E03               	movlw	3
  1105  000A90  EC98  F005         	call	_Lcd_Set_Cursor
  1106                           
  1107                           ;MainCode.c: 394:                 Lcd_Write_String("|Yes|");
  1108  000A94  0E92               	movlw	low STR_9
  1109  000A96  6E20               	movwf	Lcd_Write_String@a,c
  1110  000A98  0E08               	movlw	high STR_9
  1111  000A9A  6E21               	movwf	Lcd_Write_String@a+1,c
  1112  000A9C  EC95  F006         	call	_Lcd_Write_String	;wreg free
  1113                           
  1114                           ;MainCode.c: 395:                 Lcd_Set_Cursor(4,2);
  1115  000AA0  0E02               	movlw	2
  1116  000AA2  6E1F               	movwf	Lcd_Set_Cursor@b,c
  1117  000AA4  0E04               	movlw	4
  1118  000AA6  EC98  F005         	call	_Lcd_Set_Cursor
  1119                           
  1120                           ;MainCode.c: 396:                 Lcd_Write_String(" No ");
  1121  000AAA  0E98               	movlw	low STR_10
  1122  000AAC  6E20               	movwf	Lcd_Write_String@a,c
  1123  000AAE  0E08               	movlw	high STR_10
  1124  000AB0  6E21               	movwf	Lcd_Write_String@a+1,c
  1125  000AB2  EC95  F006         	call	_Lcd_Write_String	;wreg free
  1126                           
  1127                           ;MainCode.c: 397:                 break;
  1128  000AB6  D035               	goto	l244
  1129  000AB8                     l1445:
  1130                           
  1131                           ;MainCode.c: 399:                Lcd_Set_Cursor(3,2);
  1132  000AB8  0E02               	movlw	2
  1133  000ABA  6E1F               	movwf	Lcd_Set_Cursor@b,c
  1134  000ABC  0E03               	movlw	3
  1135  000ABE  EC98  F005         	call	_Lcd_Set_Cursor
  1136                           
  1137                           ;MainCode.c: 400:                 Lcd_Write_String(" Yes ");
  1138  000AC2  0E86               	movlw	low STR_11
  1139  000AC4  6E20               	movwf	Lcd_Write_String@a,c
  1140  000AC6  0E08               	movlw	high STR_11
  1141  000AC8  6E21               	movwf	Lcd_Write_String@a+1,c
  1142  000ACA  EC95  F006         	call	_Lcd_Write_String	;wreg free
  1143                           
  1144                           ;MainCode.c: 401:                 Lcd_Set_Cursor(4,2);
  1145  000ACE  0E02               	movlw	2
  1146  000AD0  6E1F               	movwf	Lcd_Set_Cursor@b,c
  1147  000AD2  0E04               	movlw	4
  1148  000AD4  EC98  F005         	call	_Lcd_Set_Cursor
  1149                           
  1150                           ;MainCode.c: 402:                 Lcd_Write_String("|No|");
  1151  000AD8  0E9D               	movlw	low STR_12
  1152  000ADA  6E20               	movwf	Lcd_Write_String@a,c
  1153  000ADC  0E08               	movlw	high STR_12
  1154  000ADE  6E21               	movwf	Lcd_Write_String@a+1,c
  1155  000AE0  EC95  F006         	call	_Lcd_Write_String	;wreg free
  1156                           
  1157                           ;MainCode.c: 403:                 break;
  1158  000AE4  D01E               	goto	l244
  1159  000AE6                     l1451:
  1160                           
  1161                           ;MainCode.c: 405:                 Lcd_Set_Cursor(3,1);
  1162  000AE6  0E01               	movlw	1
  1163  000AE8  6E1F               	movwf	Lcd_Set_Cursor@b,c
  1164  000AEA  0E03               	movlw	3
  1165  000AEC  EC98  F005         	call	_Lcd_Set_Cursor
  1166                           
  1167                           ;MainCode.c: 406:                 Lcd_Write_String("Error");
  1168  000AF0  0E8C               	movlw	low STR_13
  1169  000AF2  6E20               	movwf	Lcd_Write_String@a,c
  1170  000AF4  0E08               	movlw	high STR_13
  1171  000AF6  6E21               	movwf	Lcd_Write_String@a+1,c
  1172  000AF8  EC95  F006         	call	_Lcd_Write_String	;wreg free
  1173                           
  1174                           ;MainCode.c: 407:                 break;
  1175  000AFC  D012               	goto	l244
  1176  000AFE                     l1457:
  1177  000AFE  0060  F0B0  F026   	movff	_tick_count,??_MenuYesNo
  1178  000B04  0060  F0B4  F027   	movff	_tick_count+1,??_MenuYesNo+1
  1179                           
  1180                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1181                           ; Switch size 1, requested type "simple"
  1182                           ; Number of cases is 1, Range of values is 0 to 0
  1183                           ; switch strategies available:
  1184                           ; Name         Instructions Cycles
  1185                           ; simple_byte            4     3 (average)
  1186                           ;	Chosen strategy is simple_byte
  1187  000B0A  5027               	movf	??_MenuYesNo+1,w,c
  1188  000B0C  0A00               	xorlw	0	; case 0
  1189  000B0E  A4D8               	btfss	status,2,c
  1190  000B10  D7EA               	goto	l1451
  1191                           
  1192                           ; Switch size 1, requested type "simple"
  1193                           ; Number of cases is 2, Range of values is 0 to 1
  1194                           ; switch strategies available:
  1195                           ; Name         Instructions Cycles
  1196                           ; simple_byte            7     4 (average)
  1197                           ;	Chosen strategy is simple_byte
  1198  000B12  5026               	movf	??_MenuYesNo,w,c
  1199  000B14  0A00               	xorlw	0	; case 0
  1200  000B16  B4D8               	btfsc	status,2,c
  1201  000B18  D7B8               	goto	l1439
  1202  000B1A  0A01               	xorlw	1	; case 1
  1203  000B1C  B4D8               	btfsc	status,2,c
  1204  000B1E  D7CC               	goto	l1445
  1205  000B20  D7E2               	goto	l1451
  1206  000B22                     l244:
  1207                           
  1208                           ;MainCode.c: 385:     while(PORTAbits.RA2)
  1209  000B22  B4CA               	btfsc	16330,2,c	;volatile
  1210  000B24  D7EC               	goto	l1457
  1211  000B26                     u290:
  1212  000B26  A4CA               	btfss	16330,2,c	;volatile
  1213  000B28  D7FE               	goto	u290
  1214                           
  1215                           ;MainCode.c: 411:     playBuzzer();
  1216  000B2A  EC6B  F007         	call	_playBuzzer	;wreg free
  1217  000B2E  0012               	return		;funcret
  1218  000B30                     __end_of_MenuYesNo:
  1219                           	opt callstack 0
  1220                           
  1221 ;; *************** function _playBuzzer *****************
  1222 ;; Defined at:
  1223 ;;		line 557 in file "MainCode.c"
  1224 ;; Parameters:    Size  Location     Type
  1225 ;;		None
  1226 ;; Auto vars:     Size  Location     Type
  1227 ;;		None
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  1    wreg      void 
  1230 ;; Registers used:
  1231 ;;		wreg, status,2
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1237 ;;      Params:         0       0       0       0       0       0       0       0       0
  1238 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1239 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1240 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1241 ;;Total ram usage:        0 bytes
  1242 ;; Hardware stack levels used:    1
  1243 ;; Hardware stack levels required when called:    3
  1244 ;; This function calls:
  1245 ;;		Nothing
  1246 ;; This function is called by:
  1247 ;;		_MenuYesNo
  1248 ;; This function uses a non-reentrant model
  1249 ;;
  1250                           
  1251                           	psect	text4
  1252  000ED6                     __ptext4:
  1253                           	opt callstack 0
  1254  000ED6                     _playBuzzer:
  1255                           	opt callstack 26
  1256                           
  1257                           ;MainCode.c: 558:    PORTBbits.RB1 = 1;
  1258                           
  1259                           ;incstack = 0
  1260  000ED6  82CB               	bsf	16331,1,c	;volatile
  1261                           
  1262                           ;MainCode.c: 559:    T0CON0bits.EN = 1;
  1263  000ED8  8EB8               	bsf	16312,7,c	;volatile
  1264                           
  1265                           ;MainCode.c: 560:    TMR0L = 0;
  1266  000EDA  0E00               	movlw	0
  1267  000EDC  6EB6               	movwf	16310,c	;volatile
  1268  000EDE  0012               	return		;funcret
  1269  000EE0                     __end_of_playBuzzer:
  1270                           	opt callstack 0
  1271                           
  1272 ;; *************** function _Lcd_Write_String *****************
  1273 ;; Defined at:
  1274 ;;		line 364 in file "MainCode.c"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;  a               2   31[COMRAM] PTR unsigned char 
  1277 ;;		 -> STR_13(6), STR_12(5), STR_11(6), STR_10(5), 
  1278 ;;		 -> STR_9(6), STR_8(16), STR_7(17), STR_6(8), 
  1279 ;;		 -> STR_5(20), STR_4(15), STR_3(17), STR_2(18), 
  1280 ;;		 -> STR_1(22), 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  i               2   35[COMRAM] int 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  1    wreg      void 
  1285 ;; Registers used:
  1286 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1292 ;;      Params:         2       0       0       0       0       0       0       0       0
  1293 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1294 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1295 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1296 ;;Total ram usage:        6 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:    5
  1299 ;; This function calls:
  1300 ;;		_Lcd_Write_Char
  1301 ;; This function is called by:
  1302 ;;		_main
  1303 ;;		_MenuYesNo
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307                           	psect	text5
  1308  000D2A                     __ptext5:
  1309                           	opt callstack 0
  1310  000D2A                     _Lcd_Write_String:
  1311                           	opt callstack 24
  1312                           
  1313                           ;MainCode.c: 364: void Lcd_Write_String(char *a);MainCode.c: 365: {;MainCode.c: 366:  in
      +                          t i;;MainCode.c: 367:  for(i=0;a[i]!='\0';i++)
  1314                           
  1315                           ;incstack = 0
  1316  000D2A  0E00               	movlw	0
  1317  000D2C  6E25               	movwf	Lcd_Write_String@i+1,c
  1318  000D2E  0E00               	movlw	0
  1319  000D30  6E24               	movwf	Lcd_Write_String@i,c
  1320  000D32  D012               	goto	l1433
  1321  000D34                     l1429:
  1322                           
  1323                           ;MainCode.c: 368:     Lcd_Write_Char(a[i]);
  1324  000D34  5024               	movf	Lcd_Write_String@i,w,c
  1325  000D36  2420               	addwf	Lcd_Write_String@a,w,c
  1326  000D38  6E22               	movwf	??_Lcd_Write_String& (0+255),c
  1327  000D3A  5025               	movf	Lcd_Write_String@i+1,w,c
  1328  000D3C  2021               	addwfc	Lcd_Write_String@a+1,w,c
  1329  000D3E  6E23               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  1330  000D40  0060  F08B  FFF6   	movff	??_Lcd_Write_String,tblptrl
  1331  000D46  0060  F08F  FFF7   	movff	??_Lcd_Write_String+1,tblptrh
  1332  000D4C                     	if	0	;tblptru may be non-zero
  1333  000D4C                     	endif
  1334  000D4C                     	if	0	;tblptru may be non-zero
  1335  000D4C                     	endif
  1336  000D4C  0008               	tblrd		*
  1337  000D4E  50F5               	movf	tablat,w,c
  1338  000D50  EC02  F007         	call	_Lcd_Write_Char
  1339  000D54  4A24               	infsnz	Lcd_Write_String@i,f,c
  1340  000D56  2A25               	incf	Lcd_Write_String@i+1,f,c
  1341  000D58                     l1433:
  1342  000D58  5024               	movf	Lcd_Write_String@i,w,c
  1343  000D5A  2420               	addwf	Lcd_Write_String@a,w,c
  1344  000D5C  6E22               	movwf	??_Lcd_Write_String& (0+255),c
  1345  000D5E  5025               	movf	Lcd_Write_String@i+1,w,c
  1346  000D60  2021               	addwfc	Lcd_Write_String@a+1,w,c
  1347  000D62  6E23               	movwf	(??_Lcd_Write_String+1)& (0+255),c
  1348  000D64  0060  F08B  FFF6   	movff	??_Lcd_Write_String,tblptrl
  1349  000D6A  0060  F08F  FFF7   	movff	??_Lcd_Write_String+1,tblptrh
  1350  000D70                     	if	0	;tblptru may be non-zero
  1351  000D70                     	endif
  1352  000D70                     	if	0	;tblptru may be non-zero
  1353  000D70                     	endif
  1354  000D70  0008               	tblrd		*
  1355  000D72  50F5               	movf	tablat,w,c
  1356  000D74  0900               	iorlw	0
  1357  000D76  B4D8               	btfsc	status,2,c
  1358  000D78  0012               	return	
  1359  000D7A  D7DC               	goto	l1429
  1360  000D7C                     __end_of_Lcd_Write_String:
  1361                           	opt callstack 0
  1362                           
  1363 ;; *************** function _Lcd_Write_Char *****************
  1364 ;; Defined at:
  1365 ;;		line 348 in file "MainCode.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;  a               1    wreg     unsigned char 
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;  a               1   30[COMRAM] unsigned char 
  1370 ;;  y               1   29[COMRAM] unsigned char 
  1371 ;;  temp            1   28[COMRAM] unsigned char 
  1372 ;; Return value:  Size  Location     Type
  1373 ;;                  1    wreg      void 
  1374 ;; Registers used:
  1375 ;;		wreg, status,2, status,0, cstack
  1376 ;; Tracked objects:
  1377 ;;		On entry : 0/0
  1378 ;;		On exit  : 0/0
  1379 ;;		Unchanged: 0/0
  1380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1381 ;;      Params:         0       0       0       0       0       0       0       0       0
  1382 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1383 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1384 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1385 ;;Total ram usage:        3 bytes
  1386 ;; Hardware stack levels used:    1
  1387 ;; Hardware stack levels required when called:    4
  1388 ;; This function calls:
  1389 ;;		_Lcd_Port
  1390 ;; This function is called by:
  1391 ;;		_Lcd_Write_String
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           	psect	text6
  1396  000E04                     __ptext6:
  1397                           	opt callstack 0
  1398  000E04                     _Lcd_Write_Char:
  1399                           	opt callstack 24
  1400                           
  1401                           ;incstack = 0
  1402                           ;Lcd_Write_Char@a stored from wreg
  1403  000E04  6E1F               	movwf	Lcd_Write_Char@a,c
  1404                           
  1405                           ;MainCode.c: 348: void Lcd_Write_Char(char a);MainCode.c: 349: {;MainCode.c: 350:    cha
      +                          r temp,y;;MainCode.c: 351:    temp = a&0x0F;
  1406  000E06  501F               	movf	Lcd_Write_Char@a,w,c
  1407  000E08  0B0F               	andlw	15
  1408  000E0A  6E1D               	movwf	Lcd_Write_Char@temp,c
  1409                           
  1410                           ;MainCode.c: 352:    y = a&0xF0;
  1411  000E0C  501F               	movf	Lcd_Write_Char@a,w,c
  1412  000E0E  0BF0               	andlw	240
  1413  000E10  6E1E               	movwf	Lcd_Write_Char@y,c
  1414                           
  1415                           ;MainCode.c: 353:    PORTCbits.RC0 = 1;
  1416  000E12  80CC               	bsf	16332,0,c	;volatile
  1417                           
  1418                           ;MainCode.c: 354:    Lcd_Port(y>>4);
  1419  000E14  381E               	swapf	Lcd_Write_Char@y,w,c
  1420  000E16  0B0F               	andlw	15
  1421  000E18  EC37  F007         	call	_Lcd_Port
  1422                           
  1423                           ;MainCode.c: 355:    PORTCbits.RC1 = 1;
  1424  000E1C  82CC               	bsf	16332,1,c	;volatile
  1425                           
  1426                           ;MainCode.c: 356:    _delay((unsigned long)((40)*(64000000/4000000.0)));
  1427  000E1E  0ED5               	movlw	213
  1428  000E20                     u357:
  1429  000E20  2EE8               	decfsz	wreg,f,c
  1430  000E22  D7FE               	bra	u357
  1431  000E24  F000               	nop	
  1432                           
  1433                           ;MainCode.c: 357:    PORTCbits.RC1 = 0;
  1434  000E26  92CC               	bcf	16332,1,c	;volatile
  1435                           
  1436                           ;MainCode.c: 358:    Lcd_Port(temp);
  1437  000E28  501D               	movf	Lcd_Write_Char@temp,w,c
  1438  000E2A  EC37  F007         	call	_Lcd_Port
  1439                           
  1440                           ;MainCode.c: 359:    PORTCbits.RC1 = 1;
  1441  000E2E  82CC               	bsf	16332,1,c	;volatile
  1442                           
  1443                           ;MainCode.c: 360:    _delay((unsigned long)((40)*(64000000/4000000.0)));
  1444  000E30  0ED5               	movlw	213
  1445  000E32                     u367:
  1446  000E32  2EE8               	decfsz	wreg,f,c
  1447  000E34  D7FE               	bra	u367
  1448  000E36  F000               	nop	
  1449                           
  1450                           ;MainCode.c: 361:    PORTCbits.RC1 = 0;
  1451  000E38  92CC               	bcf	16332,1,c	;volatile
  1452  000E3A  0012               	return		;funcret
  1453  000E3C                     __end_of_Lcd_Write_Char:
  1454                           	opt callstack 0
  1455                           
  1456 ;; *************** function _Lcd_Set_Cursor *****************
  1457 ;; Defined at:
  1458 ;;		line 286 in file "MainCode.c"
  1459 ;; Parameters:    Size  Location     Type
  1460 ;;  a               1    wreg     unsigned char 
  1461 ;;  b               1   30[COMRAM] unsigned char 
  1462 ;; Auto vars:     Size  Location     Type
  1463 ;;  a               1   31[COMRAM] unsigned char 
  1464 ;;  temp            1   34[COMRAM] unsigned char 
  1465 ;;  y               1   33[COMRAM] unsigned char 
  1466 ;;  z               1   32[COMRAM] unsigned char 
  1467 ;; Return value:  Size  Location     Type
  1468 ;;                  1    wreg      void 
  1469 ;; Registers used:
  1470 ;;		wreg, status,2, status,0, cstack
  1471 ;; Tracked objects:
  1472 ;;		On entry : 0/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1476 ;;      Params:         1       0       0       0       0       0       0       0       0
  1477 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1478 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1479 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1480 ;;Total ram usage:        5 bytes
  1481 ;; Hardware stack levels used:    1
  1482 ;; Hardware stack levels required when called:    5
  1483 ;; This function calls:
  1484 ;;		_Lcd_Cmd
  1485 ;; This function is called by:
  1486 ;;		_main
  1487 ;;		_MenuYesNo
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           	psect	text7
  1492  000B30                     __ptext7:
  1493                           	opt callstack 0
  1494  000B30                     _Lcd_Set_Cursor:
  1495                           	opt callstack 24
  1496                           
  1497                           ;incstack = 0
  1498                           ;Lcd_Set_Cursor@a stored from wreg
  1499  000B30  6E20               	movwf	Lcd_Set_Cursor@a,c
  1500                           
  1501                           ;MainCode.c: 286: void Lcd_Set_Cursor(char a, char b);MainCode.c: 287: {;MainCode.c: 288
      +                          :  char temp,z,y;;MainCode.c: 289:  if(a == 1)
  1502  000B32  0420               	decf	Lcd_Set_Cursor@a,w,c
  1503  000B34  A4D8               	btfss	status,2,c
  1504  000B36  D010               	goto	l1403
  1505                           
  1506                           ;MainCode.c: 290:  {;MainCode.c: 291:    temp = 0x80 + b - 1;
  1507  000B38  501F               	movf	Lcd_Set_Cursor@b,w,c
  1508  000B3A  0F7F               	addlw	127
  1509  000B3C  6E23               	movwf	Lcd_Set_Cursor@temp,c
  1510                           
  1511                           ;MainCode.c: 292:   z = temp>>4;
  1512  000B3E  3823               	swapf	Lcd_Set_Cursor@temp,w,c
  1513  000B40  0B0F               	andlw	15
  1514  000B42  6E21               	movwf	Lcd_Set_Cursor@z,c
  1515                           
  1516                           ;MainCode.c: 293:   y = temp & 0x0F;
  1517  000B44  5023               	movf	Lcd_Set_Cursor@temp,w,c
  1518  000B46  0B0F               	andlw	15
  1519  000B48  6E22               	movwf	Lcd_Set_Cursor@y,c
  1520                           
  1521                           ;MainCode.c: 294:   Lcd_Cmd(z);
  1522  000B4A  5021               	movf	Lcd_Set_Cursor@z,w,c
  1523  000B4C  EC4D  F007         	call	_Lcd_Cmd
  1524                           
  1525                           ;MainCode.c: 295:   Lcd_Cmd(y);
  1526  000B50  5022               	movf	Lcd_Set_Cursor@y,w,c
  1527  000B52  EC4D  F007         	call	_Lcd_Cmd
  1528                           
  1529                           ;MainCode.c: 296:  }
  1530  000B56  0012               	return	
  1531  000B58                     l1403:
  1532  000B58  0E02               	movlw	2
  1533  000B5A  1820               	xorwf	Lcd_Set_Cursor@a,w,c
  1534  000B5C  A4D8               	btfss	status,2,c
  1535  000B5E  D010               	goto	l1411
  1536                           
  1537                           ;MainCode.c: 298:  {;MainCode.c: 299:   temp = 0xC0 + b - 1;
  1538  000B60  501F               	movf	Lcd_Set_Cursor@b,w,c
  1539  000B62  0FBF               	addlw	191
  1540  000B64  6E23               	movwf	Lcd_Set_Cursor@temp,c
  1541                           
  1542                           ;MainCode.c: 300:   z = temp>>4;
  1543  000B66  3823               	swapf	Lcd_Set_Cursor@temp,w,c
  1544  000B68  0B0F               	andlw	15
  1545  000B6A  6E21               	movwf	Lcd_Set_Cursor@z,c
  1546                           
  1547                           ;MainCode.c: 301:   y = temp & 0x0F;
  1548  000B6C  5023               	movf	Lcd_Set_Cursor@temp,w,c
  1549  000B6E  0B0F               	andlw	15
  1550  000B70  6E22               	movwf	Lcd_Set_Cursor@y,c
  1551                           
  1552                           ;MainCode.c: 302:   Lcd_Cmd(z);
  1553  000B72  5021               	movf	Lcd_Set_Cursor@z,w,c
  1554  000B74  EC4D  F007         	call	_Lcd_Cmd
  1555                           
  1556                           ;MainCode.c: 303:   Lcd_Cmd(y);
  1557  000B78  5022               	movf	Lcd_Set_Cursor@y,w,c
  1558  000B7A  EC4D  F007         	call	_Lcd_Cmd
  1559                           
  1560                           ;MainCode.c: 304:  }
  1561  000B7E  0012               	return	
  1562  000B80                     l1411:
  1563  000B80  0E03               	movlw	3
  1564  000B82  1820               	xorwf	Lcd_Set_Cursor@a,w,c
  1565  000B84  A4D8               	btfss	status,2,c
  1566  000B86  D010               	goto	l1419
  1567                           
  1568                           ;MainCode.c: 306:     {;MainCode.c: 307:         temp = 0x94 + b - 1;
  1569  000B88  501F               	movf	Lcd_Set_Cursor@b,w,c
  1570  000B8A  0F93               	addlw	147
  1571  000B8C  6E23               	movwf	Lcd_Set_Cursor@temp,c
  1572                           
  1573                           ;MainCode.c: 308:   z = temp>>4;
  1574  000B8E  3823               	swapf	Lcd_Set_Cursor@temp,w,c
  1575  000B90  0B0F               	andlw	15
  1576  000B92  6E21               	movwf	Lcd_Set_Cursor@z,c
  1577                           
  1578                           ;MainCode.c: 309:   y = temp & 0x0F;
  1579  000B94  5023               	movf	Lcd_Set_Cursor@temp,w,c
  1580  000B96  0B0F               	andlw	15
  1581  000B98  6E22               	movwf	Lcd_Set_Cursor@y,c
  1582                           
  1583                           ;MainCode.c: 310:   Lcd_Cmd(z);
  1584  000B9A  5021               	movf	Lcd_Set_Cursor@z,w,c
  1585  000B9C  EC4D  F007         	call	_Lcd_Cmd
  1586                           
  1587                           ;MainCode.c: 311:   Lcd_Cmd(y);
  1588  000BA0  5022               	movf	Lcd_Set_Cursor@y,w,c
  1589  000BA2  EC4D  F007         	call	_Lcd_Cmd
  1590                           
  1591                           ;MainCode.c: 312:     }
  1592  000BA6  0012               	return	
  1593  000BA8                     l1419:
  1594  000BA8  0E04               	movlw	4
  1595  000BAA  1820               	xorwf	Lcd_Set_Cursor@a,w,c
  1596  000BAC  A4D8               	btfss	status,2,c
  1597  000BAE  0012               	return	
  1598                           
  1599                           ;MainCode.c: 314:     {;MainCode.c: 315:         temp = 0xD4 + b - 1;
  1600  000BB0  501F               	movf	Lcd_Set_Cursor@b,w,c
  1601  000BB2  0FD3               	addlw	211
  1602  000BB4  6E23               	movwf	Lcd_Set_Cursor@temp,c
  1603                           
  1604                           ;MainCode.c: 316:   z = temp>>4;
  1605  000BB6  3823               	swapf	Lcd_Set_Cursor@temp,w,c
  1606  000BB8  0B0F               	andlw	15
  1607  000BBA  6E21               	movwf	Lcd_Set_Cursor@z,c
  1608                           
  1609                           ;MainCode.c: 317:   y = temp & 0x0F;
  1610  000BBC  5023               	movf	Lcd_Set_Cursor@temp,w,c
  1611  000BBE  0B0F               	andlw	15
  1612  000BC0  6E22               	movwf	Lcd_Set_Cursor@y,c
  1613                           
  1614                           ;MainCode.c: 318:   Lcd_Cmd(z);
  1615  000BC2  5021               	movf	Lcd_Set_Cursor@z,w,c
  1616  000BC4  EC4D  F007         	call	_Lcd_Cmd
  1617                           
  1618                           ;MainCode.c: 319:   Lcd_Cmd(y);
  1619  000BC8  5022               	movf	Lcd_Set_Cursor@y,w,c
  1620  000BCA  EC4D  F007         	call	_Lcd_Cmd
  1621  000BCE  0012               	return	
  1622  000BD0                     __end_of_Lcd_Set_Cursor:
  1623                           	opt callstack 0
  1624                           
  1625 ;; *************** function _Lcd_Init *****************
  1626 ;; Defined at:
  1627 ;;		line 323 in file "MainCode.c"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;		None
  1630 ;; Auto vars:     Size  Location     Type
  1631 ;;		None
  1632 ;; Return value:  Size  Location     Type
  1633 ;;                  1    wreg      void 
  1634 ;; Registers used:
  1635 ;;		wreg, status,2, cstack
  1636 ;; Tracked objects:
  1637 ;;		On entry : 0/0
  1638 ;;		On exit  : 0/0
  1639 ;;		Unchanged: 0/0
  1640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1641 ;;      Params:         0       0       0       0       0       0       0       0       0
  1642 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1643 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1644 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1645 ;;Total ram usage:        2 bytes
  1646 ;; Hardware stack levels used:    1
  1647 ;; Hardware stack levels required when called:    5
  1648 ;; This function calls:
  1649 ;;		_Lcd_Cmd
  1650 ;;		_Lcd_Port
  1651 ;; This function is called by:
  1652 ;;		_main
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656                           	psect	text8
  1657  000BD0                     __ptext8:
  1658                           	opt callstack 0
  1659  000BD0                     _Lcd_Init:
  1660                           	opt callstack 25
  1661                           
  1662                           ;MainCode.c: 325:     TRISC = 0x00;
  1663                           
  1664                           ;incstack = 0
  1665  000BD0  0E00               	movlw	0
  1666  000BD2  6EC4               	movwf	16324,c	;volatile
  1667                           
  1668                           ;MainCode.c: 326:     TRISBbits.TRISB0 = 0;
  1669  000BD4  90C3               	bcf	16323,0,c	;volatile
  1670                           
  1671                           ;MainCode.c: 327:     ANSELBbits.ANSELB0 = 0;
  1672  000BD6  013A               	movlb	58	; () banked
  1673  000BD8  9150               	bcf	80,0,b	;volatile
  1674                           
  1675                           ; BSR set to: 58
  1676                           ;MainCode.c: 328:     PORTBbits.RB0 = 1;
  1677  000BDA  80CB               	bsf	16331,0,c	;volatile
  1678                           
  1679                           ;MainCode.c: 329:     ANSELC = 0x00;
  1680  000BDC  0E00               	movlw	0
  1681  000BDE  6F60               	movwf	96,b	;volatile
  1682                           
  1683                           ; BSR set to: 58
  1684                           ;MainCode.c: 330:     Lcd_Port(0x00);
  1685  000BE0  0E00               	movlw	0
  1686  000BE2  EC37  F007         	call	_Lcd_Port
  1687                           
  1688                           ;MainCode.c: 332:    _delay((unsigned long)((20)*(64000000/4000.0)));
  1689  000BE6  0E02               	movlw	2
  1690  000BE8  6E20               	movwf	(??_Lcd_Init+1)& (0+255),c
  1691  000BEA  0EA0               	movlw	160
  1692  000BEC  6E1F               	movwf	??_Lcd_Init& (0+255),c
  1693  000BEE  0E92               	movlw	146
  1694  000BF0                     u377:
  1695  000BF0  2EE8               	decfsz	wreg,f,c
  1696  000BF2  D7FE               	bra	u377
  1697  000BF4  2E1F               	decfsz	??_Lcd_Init& (0+255),f,c
  1698  000BF6  D7FC               	bra	u377
  1699  000BF8  2E20               	decfsz	(??_Lcd_Init+1)& (0+255),f,c
  1700  000BFA  D7FA               	bra	u377
  1701  000BFC  D000               	nop2	
  1702                           
  1703                           ;MainCode.c: 333:   Lcd_Cmd(0x03);
  1704  000BFE  0E03               	movlw	3
  1705  000C00  EC4D  F007         	call	_Lcd_Cmd
  1706                           
  1707                           ;MainCode.c: 334:  _delay((unsigned long)((5)*(64000000/4000.0)));
  1708  000C04  0E68               	movlw	104
  1709  000C06  6E1F               	movwf	??_Lcd_Init& (0+255),c
  1710  000C08  0EE4               	movlw	228
  1711  000C0A                     u387:
  1712  000C0A  2EE8               	decfsz	wreg,f,c
  1713  000C0C  D7FE               	bra	u387
  1714  000C0E  2E1F               	decfsz	??_Lcd_Init& (0+255),f,c
  1715  000C10  D7FC               	bra	u387
  1716  000C12  D000               	nop2	
  1717                           
  1718                           ;MainCode.c: 335:   Lcd_Cmd(0x03);
  1719  000C14  0E03               	movlw	3
  1720  000C16  EC4D  F007         	call	_Lcd_Cmd
  1721                           
  1722                           ;MainCode.c: 336:  _delay((unsigned long)((11)*(64000000/4000.0)));
  1723  000C1A  0EE5               	movlw	229
  1724  000C1C  6E1F               	movwf	??_Lcd_Init& (0+255),c
  1725  000C1E  0E91               	movlw	145
  1726  000C20                     u397:
  1727  000C20  2EE8               	decfsz	wreg,f,c
  1728  000C22  D7FE               	bra	u397
  1729  000C24  2E1F               	decfsz	??_Lcd_Init& (0+255),f,c
  1730  000C26  D7FC               	bra	u397
  1731  000C28  F000               	nop	
  1732                           
  1733                           ;MainCode.c: 337:   Lcd_Cmd(0x03);
  1734  000C2A  0E03               	movlw	3
  1735  000C2C  EC4D  F007         	call	_Lcd_Cmd
  1736                           
  1737                           ;MainCode.c: 338:   Lcd_Cmd(0x02);
  1738  000C30  0E02               	movlw	2
  1739  000C32  EC4D  F007         	call	_Lcd_Cmd
  1740                           
  1741                           ;MainCode.c: 339:   Lcd_Cmd(0x02);
  1742  000C36  0E02               	movlw	2
  1743  000C38  EC4D  F007         	call	_Lcd_Cmd
  1744                           
  1745                           ;MainCode.c: 340:   Lcd_Cmd(0x08);
  1746  000C3C  0E08               	movlw	8
  1747  000C3E  EC4D  F007         	call	_Lcd_Cmd
  1748                           
  1749                           ;MainCode.c: 341:   Lcd_Cmd(0x00);
  1750  000C42  0E00               	movlw	0
  1751  000C44  EC4D  F007         	call	_Lcd_Cmd
  1752                           
  1753                           ;MainCode.c: 342:   Lcd_Cmd(0x0C);
  1754  000C48  0E0C               	movlw	12
  1755  000C4A  EC4D  F007         	call	_Lcd_Cmd
  1756                           
  1757                           ;MainCode.c: 343:   Lcd_Cmd(0x00);
  1758  000C4E  0E00               	movlw	0
  1759  000C50  EC4D  F007         	call	_Lcd_Cmd
  1760                           
  1761                           ;MainCode.c: 344:   Lcd_Cmd(0x06);
  1762  000C54  0E06               	movlw	6
  1763  000C56  EC4D  F007         	call	_Lcd_Cmd
  1764  000C5A  0012               	return		;funcret
  1765  000C5C                     __end_of_Lcd_Init:
  1766                           	opt callstack 0
  1767                           
  1768 ;; *************** function _Lcd_Clear *****************
  1769 ;; Defined at:
  1770 ;;		line 280 in file "MainCode.c"
  1771 ;; Parameters:    Size  Location     Type
  1772 ;;		None
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;		None
  1775 ;; Return value:  Size  Location     Type
  1776 ;;                  1    wreg      void 
  1777 ;; Registers used:
  1778 ;;		wreg, status,2, cstack
  1779 ;; Tracked objects:
  1780 ;;		On entry : 0/0
  1781 ;;		On exit  : 0/0
  1782 ;;		Unchanged: 0/0
  1783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1784 ;;      Params:         0       0       0       0       0       0       0       0       0
  1785 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1786 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1787 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1788 ;;Total ram usage:        0 bytes
  1789 ;; Hardware stack levels used:    1
  1790 ;; Hardware stack levels required when called:    5
  1791 ;; This function calls:
  1792 ;;		_Lcd_Cmd
  1793 ;; This function is called by:
  1794 ;;		_main
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798                           	psect	text9
  1799  000EBA                     __ptext9:
  1800                           	opt callstack 0
  1801  000EBA                     _Lcd_Clear:
  1802                           	opt callstack 25
  1803                           
  1804                           ;MainCode.c: 282:  Lcd_Cmd(0);
  1805                           
  1806                           ;incstack = 0
  1807  000EBA  0E00               	movlw	0
  1808  000EBC  EC4D  F007         	call	_Lcd_Cmd
  1809                           
  1810                           ;MainCode.c: 283:  Lcd_Cmd(1);
  1811  000EC0  0E01               	movlw	1
  1812  000EC2  EC4D  F007         	call	_Lcd_Cmd
  1813  000EC6  0012               	return		;funcret
  1814  000EC8                     __end_of_Lcd_Clear:
  1815                           	opt callstack 0
  1816                           
  1817 ;; *************** function _Lcd_Cmd *****************
  1818 ;; Defined at:
  1819 ;;		line 271 in file "MainCode.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;  a               1    wreg     unsigned char 
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;  a               1   29[COMRAM] unsigned char 
  1824 ;; Return value:  Size  Location     Type
  1825 ;;                  1    wreg      void 
  1826 ;; Registers used:
  1827 ;;		wreg, status,2, cstack
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1833 ;;      Params:         0       0       0       0       0       0       0       0       0
  1834 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1835 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1836 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1837 ;;Total ram usage:        2 bytes
  1838 ;; Hardware stack levels used:    1
  1839 ;; Hardware stack levels required when called:    4
  1840 ;; This function calls:
  1841 ;;		_Lcd_Port
  1842 ;; This function is called by:
  1843 ;;		_Lcd_Clear
  1844 ;;		_Lcd_Set_Cursor
  1845 ;;		_Lcd_Init
  1846 ;;		_Lcd_Shift_Right
  1847 ;;		_Lcd_Shift_Left
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           	psect	text10
  1852  000E9A                     __ptext10:
  1853                           	opt callstack 0
  1854  000E9A                     _Lcd_Cmd:
  1855                           	opt callstack 24
  1856                           
  1857                           ;incstack = 0
  1858                           ;Lcd_Cmd@a stored from wreg
  1859  000E9A  6E1E               	movwf	Lcd_Cmd@a,c
  1860                           
  1861                           ;MainCode.c: 271: void Lcd_Cmd(char a);MainCode.c: 272: {;MainCode.c: 273:  PORTCbits.RC
      +                          0 = 0;
  1862  000E9C  90CC               	bcf	16332,0,c	;volatile
  1863                           
  1864                           ;MainCode.c: 274:  Lcd_Port(a);
  1865  000E9E  501E               	movf	Lcd_Cmd@a,w,c
  1866  000EA0  EC37  F007         	call	_Lcd_Port
  1867                           
  1868                           ;MainCode.c: 275:  PORTCbits.RC1 = 1;
  1869  000EA4  82CC               	bsf	16332,1,c	;volatile
  1870                           
  1871                           ;MainCode.c: 276:     _delay((unsigned long)((4)*(64000000/4000.0)));
  1872  000EA6  0E54               	movlw	84
  1873  000EA8  6E1D               	movwf	??_Lcd_Cmd& (0+255),c
  1874  000EAA  0E1C               	movlw	28
  1875  000EAC                     u407:
  1876  000EAC  2EE8               	decfsz	wreg,f,c
  1877  000EAE  D7FE               	bra	u407
  1878  000EB0  2E1D               	decfsz	??_Lcd_Cmd& (0+255),f,c
  1879  000EB2  D7FC               	bra	u407
  1880  000EB4  D000               	nop2	
  1881                           
  1882                           ;MainCode.c: 277:     PORTCbits.RC1 = 0;
  1883  000EB6  92CC               	bcf	16332,1,c	;volatile
  1884  000EB8  0012               	return		;funcret
  1885  000EBA                     __end_of_Lcd_Cmd:
  1886                           	opt callstack 0
  1887                           
  1888 ;; *************** function _Lcd_Port *****************
  1889 ;; Defined at:
  1890 ;;		line 249 in file "MainCode.c"
  1891 ;; Parameters:    Size  Location     Type
  1892 ;;  a               1    wreg     unsigned char 
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;  a               1   27[COMRAM] unsigned char 
  1895 ;; Return value:  Size  Location     Type
  1896 ;;                  1    wreg      void 
  1897 ;; Registers used:
  1898 ;;		wreg
  1899 ;; Tracked objects:
  1900 ;;		On entry : 0/0
  1901 ;;		On exit  : 0/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1904 ;;      Params:         0       0       0       0       0       0       0       0       0
  1905 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1906 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1907 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1908 ;;Total ram usage:        1 bytes
  1909 ;; Hardware stack levels used:    1
  1910 ;; Hardware stack levels required when called:    3
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		_Lcd_Cmd
  1915 ;;		_Lcd_Init
  1916 ;;		_Lcd_Write_Char
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920                           	psect	text11
  1921  000E6E                     __ptext11:
  1922                           	opt callstack 0
  1923  000E6E                     _Lcd_Port:
  1924                           	opt callstack 24
  1925                           
  1926                           ;incstack = 0
  1927                           ;Lcd_Port@a stored from wreg
  1928  000E6E  6E1C               	movwf	Lcd_Port@a,c
  1929                           
  1930                           ;MainCode.c: 249: void Lcd_Port(char a);MainCode.c: 250: {;MainCode.c: 251:  if(a & 1)
  1931  000E70  A01C               	btfss	Lcd_Port@a,0,c
  1932  000E72  D002               	goto	l199
  1933                           
  1934                           ;MainCode.c: 252:   PORTCbits.RC2 = 1;
  1935  000E74  84CC               	bsf	16332,2,c	;volatile
  1936  000E76  D001               	goto	l965
  1937  000E78                     l199:
  1938                           
  1939                           ;MainCode.c: 254:   PORTCbits.RC2 = 0;
  1940  000E78  94CC               	bcf	16332,2,c	;volatile
  1941  000E7A                     l965:
  1942                           
  1943                           ;MainCode.c: 256:  if(a & 2)
  1944  000E7A  A21C               	btfss	Lcd_Port@a,1,c
  1945  000E7C  D002               	goto	l201
  1946                           
  1947                           ;MainCode.c: 257:   PORTCbits.RC5 = 1;
  1948  000E7E  8ACC               	bsf	16332,5,c	;volatile
  1949  000E80  D001               	goto	l969
  1950  000E82                     l201:
  1951                           
  1952                           ;MainCode.c: 259:   PORTCbits.RC5 = 0;
  1953  000E82  9ACC               	bcf	16332,5,c	;volatile
  1954  000E84                     l969:
  1955                           
  1956                           ;MainCode.c: 261:  if(a & 4)
  1957  000E84  A41C               	btfss	Lcd_Port@a,2,c
  1958  000E86  D002               	goto	l203
  1959                           
  1960                           ;MainCode.c: 262:   PORTCbits.RC6 = 1;
  1961  000E88  8CCC               	bsf	16332,6,c	;volatile
  1962  000E8A  D001               	goto	l973
  1963  000E8C                     l203:
  1964                           
  1965                           ;MainCode.c: 264:   PORTCbits.RC6 = 0;
  1966  000E8C  9CCC               	bcf	16332,6,c	;volatile
  1967  000E8E                     l973:
  1968                           
  1969                           ;MainCode.c: 266:  if(a & 8)
  1970  000E8E  A61C               	btfss	Lcd_Port@a,3,c
  1971  000E90  D002               	goto	l205
  1972                           
  1973                           ;MainCode.c: 267:   PORTCbits.RC7 = 1;
  1974  000E92  8ECC               	bsf	16332,7,c	;volatile
  1975  000E94  0012               	return	
  1976  000E96                     l205:
  1977                           
  1978                           ;MainCode.c: 269:   PORTCbits.RC7 = 0;
  1979  000E96  9ECC               	bcf	16332,7,c	;volatile
  1980  000E98  0012               	return		;funcret
  1981  000E9A                     __end_of_Lcd_Port:
  1982                           	opt callstack 0
  1983                           
  1984 ;; *************** function _buzzerInt *****************
  1985 ;; Defined at:
  1986 ;;		line 166 in file "MainCode.c"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;		None
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;		None
  1991 ;; Return value:  Size  Location     Type
  1992 ;;                  1    wreg      void 
  1993 ;; Registers used:
  1994 ;;		None
  1995 ;; Tracked objects:
  1996 ;;		On entry : 0/0
  1997 ;;		On exit  : 0/0
  1998 ;;		Unchanged: 0/0
  1999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2000 ;;      Params:         0       0       0       0       0       0       0       0       0
  2001 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2002 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2003 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2004 ;;Total ram usage:        0 bytes
  2005 ;; Hardware stack levels used:    1
  2006 ;; Hardware stack levels required when called:    2
  2007 ;; This function calls:
  2008 ;;		Nothing
  2009 ;; This function is called by:
  2010 ;;		Interrupt level 1
  2011 ;; This function uses a non-reentrant model
  2012 ;;
  2013                           
  2014                           	psect	text12
  2015  000EE0                     __ptext12:
  2016                           	opt callstack 0
  2017  000EE0                     _buzzerInt:
  2018                           	opt callstack 24
  2019                           
  2020                           ;incstack = 0
  2021  000EE0  92CB               	bcf	16331,1,c	;volatile
  2022  000EE2  9EB8               	bcf	16312,7,c	;volatile
  2023  000EE4  0139               	movlb	57	; () banked
  2024  000EE6  9FA3               	bcf	163,7,b	;volatile
  2025                           
  2026                           ; BSR set to: 57
  2027  000EE8  0011               	retfie		f
  2028  000EEA                     __end_of_buzzerInt:
  2029                           	opt callstack 0
  2030                           
  2031 ;; *************** function _encInt *****************
  2032 ;; Defined at:
  2033 ;;		line 172 in file "MainCode.c"
  2034 ;; Parameters:    Size  Location     Type
  2035 ;;		None
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;		None
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  1    wreg      void 
  2040 ;; Registers used:
  2041 ;;		wreg, status,2, status,0, cstack
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2047 ;;      Params:         0       0       0       0       0       0       0       0       0
  2048 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2049 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2050 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2051 ;;Total ram usage:        1 bytes
  2052 ;; Hardware stack levels used:    1
  2053 ;; Hardware stack levels required when called:    1
  2054 ;; This function calls:
  2055 ;;		i2_playBuzzer
  2056 ;; This function is called by:
  2057 ;;		Interrupt level 2
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061                           	psect	text13
  2062  000DC0                     __ptext13:
  2063                           	opt callstack 0
  2064  000DC0                     _encInt:
  2065                           	opt callstack 24
  2066                           
  2067                           ; BSR set to: 57
  2068                           ;incstack = 0
  2069  000DC0  A0CA               	btfss	16330,0,c	;volatile
  2070  000DC2  D010               	goto	i2l1309
  2071  000DC4  502C               	movf	_tick_count,w,c
  2072  000DC6  5C2A               	subwf	_min_tick_count,w,c
  2073  000DC8  502B               	movf	_min_tick_count+1,w,c
  2074  000DCA  0A80               	xorlw	128
  2075  000DCC  6E01               	movwf	??_encInt& (0+255),c
  2076  000DCE  502D               	movf	_tick_count+1,w,c
  2077  000DD0  0A80               	xorlw	128
  2078  000DD2  5801               	subwfb	??_encInt& (0+255),w,c
  2079  000DD4  B0D8               	btfsc	status,0,c
  2080  000DD6  D013               	goto	i2l1315
  2081  000DD8  062C               	decf	_tick_count,f,c
  2082  000DDA  A0D8               	btfss	status,0,c
  2083  000DDC  062D               	decf	_tick_count+1,f,c
  2084  000DDE                     i2l1307:
  2085  000DDE  EC75  F007         	call	i2_playBuzzer	;wreg free
  2086  000DE2  D00D               	goto	i2l1315
  2087  000DE4                     i2l1309:
  2088  000DE4  503A               	movf	_max_tick_count,w,c
  2089  000DE6  5C2C               	subwf	_tick_count,w,c
  2090  000DE8  502D               	movf	_tick_count+1,w,c
  2091  000DEA  0A80               	xorlw	128
  2092  000DEC  6E01               	movwf	??_encInt& (0+255),c
  2093  000DEE  503B               	movf	_max_tick_count+1,w,c
  2094  000DF0  0A80               	xorlw	128
  2095  000DF2  5801               	subwfb	??_encInt& (0+255),w,c
  2096  000DF4  B0D8               	btfsc	status,0,c
  2097  000DF6  D003               	goto	i2l1315
  2098  000DF8  4A2C               	infsnz	_tick_count,f,c
  2099  000DFA  2A2D               	incf	_tick_count+1,f,c
  2100  000DFC  D7F0               	goto	i2l1307
  2101  000DFE                     i2l1315:
  2102  000DFE  0139               	movlb	57	; () banked
  2103  000E00  91A1               	bcf	161,0,b	;volatile
  2104                           
  2105                           ; BSR set to: 57
  2106  000E02  0011               	retfie		f
  2107  000E04                     __end_of_encInt:
  2108                           	opt callstack 0
  2109                           
  2110 ;; *************** function i2_playBuzzer *****************
  2111 ;; Defined at:
  2112 ;;		line 557 in file "MainCode.c"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;		None
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;		None
  2117 ;; Return value:  Size  Location     Type
  2118 ;;                  1    wreg      void 
  2119 ;; Registers used:
  2120 ;;		wreg, status,2
  2121 ;; Tracked objects:
  2122 ;;		On entry : 0/0
  2123 ;;		On exit  : 0/0
  2124 ;;		Unchanged: 0/0
  2125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2126 ;;      Params:         0       0       0       0       0       0       0       0       0
  2127 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2128 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2129 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2130 ;;Total ram usage:        0 bytes
  2131 ;; Hardware stack levels used:    1
  2132 ;; This function calls:
  2133 ;;		Nothing
  2134 ;; This function is called by:
  2135 ;;		_encInt
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           	psect	text14
  2140  000EEA                     __ptext14:
  2141                           	opt callstack 0
  2142  000EEA                     i2_playBuzzer:
  2143                           	opt callstack 24
  2144                           
  2145                           ;MainCode.c: 558:    PORTBbits.RB1 = 1;
  2146                           
  2147                           ; BSR set to: 57
  2148                           ;incstack = 0
  2149  000EEA  82CB               	bsf	16331,1,c	;volatile
  2150                           
  2151                           ;MainCode.c: 559:    T0CON0bits.EN = 1;
  2152  000EEC  8EB8               	bsf	16312,7,c	;volatile
  2153                           
  2154                           ;MainCode.c: 560:    TMR0L = 0;
  2155  000EEE  0E00               	movlw	0
  2156  000EF0  6EB6               	movwf	16310,c	;volatile
  2157  000EF2  0012               	return		;funcret
  2158  000EF4                     __end_ofi2_playBuzzer:
  2159                           	opt callstack 0
  2160                           
  2161 ;; *************** function _adcInt *****************
  2162 ;; Defined at:
  2163 ;;		line 190 in file "MainCode.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;		None
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;		None
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  1    wreg      void 
  2170 ;; Registers used:
  2171 ;;		None
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2177 ;;      Params:         0       0       0       0       0       0       0       0       0
  2178 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2179 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2180 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2181 ;;Total ram usage:        0 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; This function calls:
  2184 ;;		Nothing
  2185 ;; This function is called by:
  2186 ;;		Interrupt level 2
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           	psect	text15
  2191  000EFC                     __ptext15:
  2192                           	opt callstack 0
  2193  000EFC                     _adcInt:
  2194                           	opt callstack 25
  2195                           
  2196                           ;incstack = 0
  2197  000EFC  0011               	retfie		f
  2198  000EFE                     __end_of_adcInt:
  2199                           	opt callstack 0
  2200                           
  2201 ;; *************** function _canRecInt2 *****************
  2202 ;; Defined at:
  2203 ;;		line 196 in file "MainCode.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;		None
  2206 ;; Auto vars:     Size  Location     Type
  2207 ;;  message        16   11[COMRAM] int [8]
  2208 ;; Return value:  Size  Location     Type
  2209 ;;                  1    wreg      void 
  2210 ;; Registers used:
  2211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2212 ;; Tracked objects:
  2213 ;;		On entry : 0/0
  2214 ;;		On exit  : 0/0
  2215 ;;		Unchanged: 0/0
  2216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2217 ;;      Params:         0       0       0       0       0       0       0       0       0
  2218 ;;      Locals:        16       0       0       0       0       0       0       0       0
  2219 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2220 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2221 ;;Total ram usage:       18 bytes
  2222 ;; Hardware stack levels used:    1
  2223 ;; Hardware stack levels required when called:    1
  2224 ;; This function calls:
  2225 ;;		_sendCANmessage
  2226 ;; This function is called by:
  2227 ;;		Interrupt level 2
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           	psect	text16
  2232  000CC8                     __ptext16:
  2233                           	opt callstack 0
  2234  000CC8                     _canRecInt2:
  2235                           	opt callstack 24
  2236                           
  2237                           ;incstack = 0
  2238  000CC8  BE80               	btfsc	16256,7,c	;volatile
  2239  000CCA  D01D               	goto	i2l1601
  2240  000CCC  D02B               	goto	i2l186
  2241  000CCE                     i2l188:
  2242  000CCE  0060  F0B0  F00C   	movff	_tick_count,canRecInt2@message
  2243  000CD4  0060  F0B4  F00D   	movff	_tick_count+1,canRecInt2@message+1
  2244  000CDA                     i2l1595:
  2245  000CDA  0E00               	movlw	0
  2246  000CDC  6E03               	movwf	sendCANmessage@id+1,c
  2247  000CDE  0E00               	movlw	0
  2248  000CE0  6E02               	movwf	sendCANmessage@id,c
  2249  000CE2  0E0C               	movlw	low canRecInt2@message
  2250  000CE4  6E04               	movwf	sendCANmessage@message,c
  2251  000CE6  0E00               	movlw	high canRecInt2@message
  2252  000CE8  6E05               	movwf	sendCANmessage@message+1,c
  2253  000CEA  0E00               	movlw	0
  2254  000CEC  6E07               	movwf	sendCANmessage@length+1,c
  2255  000CEE  0E01               	movlw	1
  2256  000CF0  6E06               	movwf	sendCANmessage@length,c
  2257  000CF2  ECD9  F004         	call	_sendCANmessage	;wreg free
  2258  000CF6  D015               	goto	i2l189
  2259  000CF8                     i2l190:
  2260  000CF8  0060  F0E0  F00C   	movff	_status,canRecInt2@message
  2261  000CFE  0060  F0E4  F00D   	movff	_status+1,canRecInt2@message+1
  2262  000D04  D7EA               	goto	i2l1595
  2263  000D06                     i2l1601:
  2264  000D06  5086               	movf	16262,w,c	;volatile
  2265  000D08  6E0A               	movwf	??_canRecInt2& (0+255),c
  2266  000D0A  6A0B               	clrf	(??_canRecInt2+1)& (0+255),c
  2267                           
  2268                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2269                           ; Switch size 1, requested type "simple"
  2270                           ; Number of cases is 1, Range of values is 0 to 0
  2271                           ; switch strategies available:
  2272                           ; Name         Instructions Cycles
  2273                           ; simple_byte            4     3 (average)
  2274                           ;	Chosen strategy is simple_byte
  2275  000D0C  500B               	movf	??_canRecInt2+1,w,c
  2276  000D0E  0A00               	xorlw	0	; case 0
  2277  000D10  A4D8               	btfss	status,2,c
  2278  000D12  D007               	goto	i2l189
  2279                           
  2280                           ; Switch size 1, requested type "simple"
  2281                           ; Number of cases is 2, Range of values is 0 to 1
  2282                           ; switch strategies available:
  2283                           ; Name         Instructions Cycles
  2284                           ; simple_byte            7     4 (average)
  2285                           ;	Chosen strategy is simple_byte
  2286  000D14  500A               	movf	??_canRecInt2,w,c
  2287  000D16  0A00               	xorlw	0	; case 0
  2288  000D18  B4D8               	btfsc	status,2,c
  2289  000D1A  D7D9               	goto	i2l188
  2290  000D1C  0A01               	xorlw	1	; case 1
  2291  000D1E  B4D8               	btfsc	status,2,c
  2292  000D20  D7EB               	goto	i2l190
  2293  000D22                     i2l189:
  2294                           
  2295                           ;MainCode.c: 238:         RXB0CONbits.RXFUL = 0;
  2296  000D22  9E80               	bcf	16256,7,c	;volatile
  2297  000D24                     i2l186:
  2298                           
  2299                           ;MainCode.c: 240:     PIR5bits.RXB0IF = 0;
  2300  000D24  0139               	movlb	57	; () banked
  2301  000D26  91A5               	bcf	165,0,b	;volatile
  2302                           
  2303                           ; BSR set to: 57
  2304  000D28  0011               	retfie		f
  2305  000D2A                     __end_of_canRecInt2:
  2306                           	opt callstack 0
  2307                           
  2308 ;; *************** function _sendCANmessage *****************
  2309 ;; Defined at:
  2310 ;;		line 505 in file "MainCode.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;  id              2    1[COMRAM] int 
  2313 ;;  message         2    3[COMRAM] PTR int 
  2314 ;;		 -> canRecInt2@message(16), 
  2315 ;;  length          2    5[COMRAM] int 
  2316 ;; Auto vars:     Size  Location     Type
  2317 ;;		None
  2318 ;; Return value:  Size  Location     Type
  2319 ;;                  1    wreg      void 
  2320 ;; Registers used:
  2321 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2322 ;; Tracked objects:
  2323 ;;		On entry : 0/0
  2324 ;;		On exit  : 0/0
  2325 ;;		Unchanged: 0/0
  2326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2327 ;;      Params:         6       0       0       0       0       0       0       0       0
  2328 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2329 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2330 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2331 ;;Total ram usage:        8 bytes
  2332 ;; Hardware stack levels used:    1
  2333 ;; This function calls:
  2334 ;;		Nothing
  2335 ;; This function is called by:
  2336 ;;		_canRecInt2
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           	psect	text17
  2341  0009B2                     __ptext17:
  2342                           	opt callstack 0
  2343  0009B2                     _sendCANmessage:
  2344                           	opt callstack 24
  2345                           
  2346                           ;MainCode.c: 506:     TXB0CONbits.TXREQ = 0;
  2347                           
  2348                           ; BSR set to: 57
  2349                           ;incstack = 0
  2350  0009B2  0137               	movlb	55	; () banked
  2351  0009B4  97E0               	bcf	224,3,b	;volatile
  2352                           
  2353                           ; BSR set to: 55
  2354                           ;MainCode.c: 508:     CANCONbits.WIN = 0b000;
  2355  0009B6  0EF1               	movlw	-15
  2356  0009B8  168F               	andwf	16271,f,c	;volatile
  2357                           
  2358                           ;MainCode.c: 510:     TXB0CONbits.TXPRI = 0b11;
  2359  0009BA  0E03               	movlw	3
  2360  0009BC  13E0               	iorwf	224,f,b	;volatile
  2361                           
  2362                           ; BSR set to: 55
  2363                           ;MainCode.c: 512:     TXB0D0 = message[0];
  2364  0009BE  0060  F013  FFD9   	movff	sendCANmessage@message,fsr2l
  2365  0009C4  0060  F017  FFDA   	movff	sendCANmessage@message+1,fsr2h
  2366  0009CA  50DF               	movf	indf2,w,c
  2367  0009CC  6FE6               	movwf	230,b	;volatile
  2368                           
  2369                           ; BSR set to: 55
  2370                           ;MainCode.c: 513:     TXB0D1 = message[1];
  2371  0009CE  EE20 F002          	lfsr	2,2
  2372  0009D2  5004               	movf	sendCANmessage@message,w,c
  2373  0009D4  26D9               	addwf	fsr2l,f,c
  2374  0009D6  5005               	movf	sendCANmessage@message+1,w,c
  2375  0009D8  22DA               	addwfc	fsr2h,f,c
  2376  0009DA  50DF               	movf	indf2,w,c
  2377  0009DC  6FE7               	movwf	231,b	;volatile
  2378                           
  2379                           ; BSR set to: 55
  2380                           ;MainCode.c: 514:     TXB0D2 = message[2];
  2381  0009DE  EE20 F004          	lfsr	2,4
  2382  0009E2  5004               	movf	sendCANmessage@message,w,c
  2383  0009E4  26D9               	addwf	fsr2l,f,c
  2384  0009E6  5005               	movf	sendCANmessage@message+1,w,c
  2385  0009E8  22DA               	addwfc	fsr2h,f,c
  2386  0009EA  50DF               	movf	indf2,w,c
  2387  0009EC  6FE8               	movwf	232,b	;volatile
  2388                           
  2389                           ; BSR set to: 55
  2390                           ;MainCode.c: 515:     TXB0D3 = message[3];
  2391  0009EE  EE20 F006          	lfsr	2,6
  2392  0009F2  5004               	movf	sendCANmessage@message,w,c
  2393  0009F4  26D9               	addwf	fsr2l,f,c
  2394  0009F6  5005               	movf	sendCANmessage@message+1,w,c
  2395  0009F8  22DA               	addwfc	fsr2h,f,c
  2396  0009FA  50DF               	movf	indf2,w,c
  2397  0009FC  6FE9               	movwf	233,b	;volatile
  2398                           
  2399                           ; BSR set to: 55
  2400                           ;MainCode.c: 516:     TXB0D4 = message[4];
  2401  0009FE  EE20 F008          	lfsr	2,8
  2402  000A02  5004               	movf	sendCANmessage@message,w,c
  2403  000A04  26D9               	addwf	fsr2l,f,c
  2404  000A06  5005               	movf	sendCANmessage@message+1,w,c
  2405  000A08  22DA               	addwfc	fsr2h,f,c
  2406  000A0A  50DF               	movf	indf2,w,c
  2407  000A0C  6FEA               	movwf	234,b	;volatile
  2408                           
  2409                           ; BSR set to: 55
  2410                           ;MainCode.c: 517:     TXB0D5 = message[5];
  2411  000A0E  EE20 F00A          	lfsr	2,10
  2412  000A12  5004               	movf	sendCANmessage@message,w,c
  2413  000A14  26D9               	addwf	fsr2l,f,c
  2414  000A16  5005               	movf	sendCANmessage@message+1,w,c
  2415  000A18  22DA               	addwfc	fsr2h,f,c
  2416  000A1A  50DF               	movf	indf2,w,c
  2417  000A1C  6FEB               	movwf	235,b	;volatile
  2418                           
  2419                           ; BSR set to: 55
  2420                           ;MainCode.c: 518:     TXB0D6 = message[6];
  2421  000A1E  EE20 F00C          	lfsr	2,12
  2422  000A22  5004               	movf	sendCANmessage@message,w,c
  2423  000A24  26D9               	addwf	fsr2l,f,c
  2424  000A26  5005               	movf	sendCANmessage@message+1,w,c
  2425  000A28  22DA               	addwfc	fsr2h,f,c
  2426  000A2A  50DF               	movf	indf2,w,c
  2427  000A2C  6FEC               	movwf	236,b	;volatile
  2428                           
  2429                           ; BSR set to: 55
  2430                           ;MainCode.c: 519:     TXB0D7 = message[7];
  2431  000A2E  EE20 F00E          	lfsr	2,14
  2432  000A32  5004               	movf	sendCANmessage@message,w,c
  2433  000A34  26D9               	addwf	fsr2l,f,c
  2434  000A36  5005               	movf	sendCANmessage@message+1,w,c
  2435  000A38  22DA               	addwfc	fsr2h,f,c
  2436  000A3A  50DF               	movf	indf2,w,c
  2437  000A3C  6FED               	movwf	237,b	;volatile
  2438                           
  2439                           ;MainCode.c: 521:     TXB0SIDLbits.SID = id;
  2440  000A3E  0060  F008  F008   	movff	sendCANmessage@id,??_sendCANmessage
  2441  000A44  3A08               	swapf	??_sendCANmessage,f,c
  2442  000A46  4608               	rlncf	??_sendCANmessage,f,c
  2443  000A48  51E2               	movf	226,w,b	;volatile
  2444  000A4A  1808               	xorwf	??_sendCANmessage,w,c
  2445  000A4C  0B1F               	andlw	-225
  2446  000A4E  1808               	xorwf	??_sendCANmessage,w,c
  2447  000A50  6FE2               	movwf	226,b	;volatile
  2448                           
  2449                           ;MainCode.c: 522:     TXB0SIDH = id >> 3;
  2450  000A52  0060  F008  F008   	movff	sendCANmessage@id,??_sendCANmessage
  2451  000A58  0060  F00C  F009   	movff	sendCANmessage@id+1,??_sendCANmessage+1
  2452  000A5E  3409               	rlcf	??_sendCANmessage+1,w,c
  2453  000A60  3209               	rrcf	??_sendCANmessage+1,f,c
  2454  000A62  3208               	rrcf	??_sendCANmessage,f,c
  2455  000A64  3409               	rlcf	??_sendCANmessage+1,w,c
  2456  000A66  3209               	rrcf	??_sendCANmessage+1,f,c
  2457  000A68  3208               	rrcf	??_sendCANmessage,f,c
  2458  000A6A  3409               	rlcf	??_sendCANmessage+1,w,c
  2459  000A6C  3209               	rrcf	??_sendCANmessage+1,f,c
  2460  000A6E  3208               	rrcf	??_sendCANmessage,f,c
  2461  000A70  5008               	movf	??_sendCANmessage,w,c
  2462  000A72  6FE1               	movwf	225,b	;volatile
  2463                           
  2464                           ;MainCode.c: 524:     TXB0DLCbits.DLC = length;
  2465  000A74  51E5               	movf	229,w,b	;volatile
  2466  000A76  1806               	xorwf	sendCANmessage@length,w,c
  2467  000A78  0BF0               	andlw	-16
  2468  000A7A  1806               	xorwf	sendCANmessage@length,w,c
  2469  000A7C  6FE5               	movwf	229,b	;volatile
  2470                           
  2471                           ; BSR set to: 55
  2472                           ;MainCode.c: 525:     TXB0DLCbits.TXRTR = 0;
  2473  000A7E  9DE5               	bcf	229,6,b	;volatile
  2474                           
  2475                           ; BSR set to: 55
  2476                           ;MainCode.c: 527:     TXB0CONbits.TXREQ = 1;
  2477  000A80  87E0               	bsf	224,3,b	;volatile
  2478  000A82                     i2l267:
  2479                           
  2480                           ; BSR set to: 55
  2481  000A82  B7E0               	btfsc	224,3,b	;volatile
  2482  000A84  0012               	return	
  2483  000A86  D7FD               	goto	i2l267
  2484  000A88                     __end_of_sendCANmessage:
  2485                           	opt callstack 0
  2486                           
  2487 ;; *************** function _canRecInt *****************
  2488 ;; Defined at:
  2489 ;;		line 243 in file "MainCode.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;		None
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;		None
  2494 ;; Return value:  Size  Location     Type
  2495 ;;                  1    wreg      void 
  2496 ;; Registers used:
  2497 ;;		wreg, status,2
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2503 ;;      Params:         0       0       0       0       0       0       0       0       0
  2504 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2505 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2506 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2507 ;;Total ram usage:        0 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; This function calls:
  2510 ;;		Nothing
  2511 ;; This function is called by:
  2512 ;;		Interrupt level 2
  2513 ;; This function uses a non-reentrant model
  2514 ;;
  2515                           
  2516                           	psect	text18
  2517  000EC8                     __ptext18:
  2518                           	opt callstack 0
  2519  000EC8                     _canRecInt:
  2520                           	opt callstack 25
  2521                           
  2522                           ;MainCode.c: 244:     tick_count = 69;
  2523                           
  2524                           ; BSR set to: 55
  2525                           ;incstack = 0
  2526  000EC8  0E00               	movlw	0
  2527  000ECA  6E2D               	movwf	_tick_count+1,c
  2528  000ECC  0E45               	movlw	69
  2529  000ECE  6E2C               	movwf	_tick_count,c
  2530                           
  2531                           ;MainCode.c: 245:     PIR5bits.RXB1IF = 0;
  2532  000ED0  0139               	movlb	57	; () banked
  2533  000ED2  93A5               	bcf	165,1,b	;volatile
  2534                           
  2535                           ; BSR set to: 57
  2536  000ED4  0011               	retfie		f
  2537  000ED6                     __end_of_canRecInt:
  2538                           	opt callstack 0
  2539                           
  2540                           ;
  2541                           ; Interrupt Vector Table @ 0x8
  2542                           ;
  2543                           
  2544                           	psect	ivt0x8
  2545  000008                     __pivt0x8:
  2546                           	opt callstack 0
  2547  000008                     ivt0x8_base:
  2548                           	opt callstack 0
  2549                           
  2550                           ; Vector 0 : SWINT
  2551  000008  0029               	dw	ivt0x8_undefint shr (0+2)
  2552                           
  2553                           ; Vector 1 : HLVD
  2554  00000A  0029               	dw	ivt0x8_undefint shr (0+2)
  2555                           
  2556                           ; Vector 2 : OSF
  2557  00000C  0029               	dw	ivt0x8_undefint shr (0+2)
  2558                           
  2559                           ; Vector 3 : CSW
  2560  00000E  0029               	dw	ivt0x8_undefint shr (0+2)
  2561                           
  2562                           ; Vector 4 : NVM
  2563  000010  0029               	dw	ivt0x8_undefint shr (0+2)
  2564                           
  2565                           ; Vector 5 : SCAN
  2566  000012  0029               	dw	ivt0x8_undefint shr (0+2)
  2567                           
  2568                           ; Vector 6 : CRC
  2569  000014  0029               	dw	ivt0x8_undefint shr (0+2)
  2570                           
  2571                           ; Vector 7 : IOC
  2572  000016  0029               	dw	ivt0x8_undefint shr (0+2)
  2573                           
  2574                           ; Vector 8 : INT0
  2575  000018  0370               	dw	_encInt shr (0+2)
  2576                           
  2577                           ; Vector 9 : ZCD
  2578  00001A  0029               	dw	ivt0x8_undefint shr (0+2)
  2579                           
  2580                           ; Vector 10 : AD
  2581  00001C  03BF               	dw	_adcInt shr (0+2)
  2582                           
  2583                           ; Vector 11 : ADT
  2584  00001E  0029               	dw	ivt0x8_undefint shr (0+2)
  2585                           
  2586                           ; Vector 12 : CMP1
  2587  000020  0029               	dw	ivt0x8_undefint shr (0+2)
  2588                           
  2589                           ; Vector 13 : SMT1
  2590  000022  0029               	dw	ivt0x8_undefint shr (0+2)
  2591                           
  2592                           ; Vector 14 : SMT1PRA
  2593  000024  0029               	dw	ivt0x8_undefint shr (0+2)
  2594                           
  2595                           ; Vector 15 : SMT1PWA
  2596  000026  0029               	dw	ivt0x8_undefint shr (0+2)
  2597                           
  2598                           ; Vector 16 : DMA1SCNT
  2599  000028  0029               	dw	ivt0x8_undefint shr (0+2)
  2600                           
  2601                           ; Vector 17 : DMA1DCNT
  2602  00002A  0029               	dw	ivt0x8_undefint shr (0+2)
  2603                           
  2604                           ; Vector 18 : DMA1OR
  2605  00002C  0029               	dw	ivt0x8_undefint shr (0+2)
  2606                           
  2607                           ; Vector 19 : DMA1A
  2608  00002E  0029               	dw	ivt0x8_undefint shr (0+2)
  2609                           
  2610                           ; Vector 20 : SPI1RX
  2611  000030  0029               	dw	ivt0x8_undefint shr (0+2)
  2612                           
  2613                           ; Vector 21 : SPI1TX
  2614  000032  0029               	dw	ivt0x8_undefint shr (0+2)
  2615                           
  2616                           ; Vector 22 : SPI1
  2617  000034  0029               	dw	ivt0x8_undefint shr (0+2)
  2618                           
  2619                           ; Vector 23 : I2C1RX
  2620  000036  0029               	dw	ivt0x8_undefint shr (0+2)
  2621                           
  2622                           ; Vector 24 : I2C1TX
  2623  000038  0029               	dw	ivt0x8_undefint shr (0+2)
  2624                           
  2625                           ; Vector 25 : I2C1
  2626  00003A  0029               	dw	ivt0x8_undefint shr (0+2)
  2627                           
  2628                           ; Vector 26 : I2C1E
  2629  00003C  0029               	dw	ivt0x8_undefint shr (0+2)
  2630                           
  2631                           ; Vector 27 : U1RX
  2632  00003E  0029               	dw	ivt0x8_undefint shr (0+2)
  2633                           
  2634                           ; Vector 28 : U1TX
  2635  000040  0029               	dw	ivt0x8_undefint shr (0+2)
  2636                           
  2637                           ; Vector 29 : U1E
  2638  000042  0029               	dw	ivt0x8_undefint shr (0+2)
  2639                           
  2640                           ; Vector 30 : U1
  2641  000044  0029               	dw	ivt0x8_undefint shr (0+2)
  2642                           
  2643                           ; Vector 31 : TMR0
  2644  000046  03B8               	dw	_buzzerInt shr (0+2)
  2645                           
  2646                           ; Vector 32 : TMR1
  2647  000048  0029               	dw	ivt0x8_undefint shr (0+2)
  2648                           
  2649                           ; Vector 33 : TMR1G
  2650  00004A  0029               	dw	ivt0x8_undefint shr (0+2)
  2651                           
  2652                           ; Vector 34 : TMR2
  2653  00004C  0029               	dw	ivt0x8_undefint shr (0+2)
  2654                           
  2655                           ; Vector 35 : CCP1
  2656  00004E  0029               	dw	ivt0x8_undefint shr (0+2)
  2657                           
  2658                           ; Vector 36 : NCO1
  2659  000050  0029               	dw	ivt0x8_undefint shr (0+2)
  2660                           
  2661                           ; Vector 37 : CWG1
  2662  000052  0029               	dw	ivt0x8_undefint shr (0+2)
  2663                           
  2664                           ; Vector 38 : CLC1
  2665  000054  0029               	dw	ivt0x8_undefint shr (0+2)
  2666                           
  2667                           ; Vector 39 : INT1
  2668  000056  0029               	dw	ivt0x8_undefint shr (0+2)
  2669                           
  2670                           ; Vector 40 : RXB0IF
  2671  000058  0332               	dw	_canRecInt2 shr (0+2)
  2672                           
  2673                           ; Vector 41 : RXB1IF
  2674  00005A  03B2               	dw	_canRecInt shr (0+2)
  2675                           
  2676                           ; Vector 42 : TXB0IF
  2677  00005C  0029               	dw	ivt0x8_undefint shr (0+2)
  2678                           
  2679                           ; Vector 43 : TXB1IF
  2680  00005E  0029               	dw	ivt0x8_undefint shr (0+2)
  2681                           
  2682                           ; Vector 44 : TXB2IF
  2683  000060  0029               	dw	ivt0x8_undefint shr (0+2)
  2684                           
  2685                           ; Vector 45 : ERRIF
  2686  000062  0029               	dw	ivt0x8_undefint shr (0+2)
  2687                           
  2688                           ; Vector 46 : WAKIF
  2689  000064  0029               	dw	ivt0x8_undefint shr (0+2)
  2690                           
  2691                           ; Vector 47 : IRXIF
  2692  000066  0029               	dw	ivt0x8_undefint shr (0+2)
  2693                           
  2694                           ; Vector 48 : CMP2
  2695  000068  0029               	dw	ivt0x8_undefint shr (0+2)
  2696                           
  2697                           ; Vector 49 : SMT2
  2698  00006A  0029               	dw	ivt0x8_undefint shr (0+2)
  2699                           
  2700                           ; Vector 50 : SMT2PRA
  2701  00006C  0029               	dw	ivt0x8_undefint shr (0+2)
  2702                           
  2703                           ; Vector 51 : SMT2PWA
  2704  00006E  0029               	dw	ivt0x8_undefint shr (0+2)
  2705                           
  2706                           ; Vector 52 : DMA2SCNT
  2707  000070  0029               	dw	ivt0x8_undefint shr (0+2)
  2708                           
  2709                           ; Vector 53 : DMA2DCNT
  2710  000072  0029               	dw	ivt0x8_undefint shr (0+2)
  2711                           
  2712                           ; Vector 54 : DMA2OR
  2713  000074  0029               	dw	ivt0x8_undefint shr (0+2)
  2714                           
  2715                           ; Vector 55 : DMA2A
  2716  000076  0029               	dw	ivt0x8_undefint shr (0+2)
  2717                           
  2718                           ; Vector 56 : I2C2RX
  2719  000078  0029               	dw	ivt0x8_undefint shr (0+2)
  2720                           
  2721                           ; Vector 57 : I2C2TX
  2722  00007A  0029               	dw	ivt0x8_undefint shr (0+2)
  2723                           
  2724                           ; Vector 58 : I2C2
  2725  00007C  0029               	dw	ivt0x8_undefint shr (0+2)
  2726                           
  2727                           ; Vector 59 : I2C2E
  2728  00007E  0029               	dw	ivt0x8_undefint shr (0+2)
  2729                           
  2730                           ; Vector 60 : U2RX
  2731  000080  0029               	dw	ivt0x8_undefint shr (0+2)
  2732                           
  2733                           ; Vector 61 : U2TX
  2734  000082  0029               	dw	ivt0x8_undefint shr (0+2)
  2735                           
  2736                           ; Vector 62 : U2E
  2737  000084  0029               	dw	ivt0x8_undefint shr (0+2)
  2738                           
  2739                           ; Vector 63 : U2
  2740  000086  0029               	dw	ivt0x8_undefint shr (0+2)
  2741                           
  2742                           ; Vector 64 : TMR3
  2743  000088  0029               	dw	ivt0x8_undefint shr (0+2)
  2744                           
  2745                           ; Vector 65 : TMR3G
  2746  00008A  0029               	dw	ivt0x8_undefint shr (0+2)
  2747                           
  2748                           ; Vector 66 : TMR4
  2749  00008C  0029               	dw	ivt0x8_undefint shr (0+2)
  2750                           
  2751                           ; Vector 67 : CCP2
  2752  00008E  0029               	dw	ivt0x8_undefint shr (0+2)
  2753                           
  2754                           ; Vector 68 : CWG2
  2755  000090  0029               	dw	ivt0x8_undefint shr (0+2)
  2756                           
  2757                           ; Vector 69 : CLC2
  2758  000092  0029               	dw	ivt0x8_undefint shr (0+2)
  2759                           
  2760                           ; Vector 70 : INT2
  2761  000094  0029               	dw	ivt0x8_undefint shr (0+2)
  2762                           
  2763                           ; Vector 71 : TMR5
  2764  000096  0029               	dw	ivt0x8_undefint shr (0+2)
  2765                           
  2766                           ; Vector 72 : TMR5G
  2767  000098  0029               	dw	ivt0x8_undefint shr (0+2)
  2768                           
  2769                           ; Vector 73 : TMR6
  2770  00009A  0029               	dw	ivt0x8_undefint shr (0+2)
  2771                           
  2772                           ; Vector 74 : CCP3
  2773  00009C  0029               	dw	ivt0x8_undefint shr (0+2)
  2774                           
  2775                           ; Vector 75 : CWG3
  2776  00009E  0029               	dw	ivt0x8_undefint shr (0+2)
  2777                           
  2778                           ; Vector 76 : CLC3
  2779  0000A0  0029               	dw	ivt0x8_undefint shr (0+2)
  2780                           
  2781                           ; Vector 77 : CCP4
  2782  0000A2  0029               	dw	ivt0x8_undefint shr (0+2)
  2783                           
  2784                           ; Vector 78 : CLC4
  2785  0000A4  0029               	dw	ivt0x8_undefint shr (0+2)
  2786  0000A6                     ivt0x8_undefint:
  2787                           	opt callstack 0
  2788  0000A6  00FF               	reset	
  2789                           
  2790                           	psect	rparam
  2791  0000                     tosu	equ	0x3FFF
  2792                           tosh	equ	0x3FFE
  2793                           tosl	equ	0x3FFD
  2794                           stkptr	equ	0x3FFC
  2795                           pclatu	equ	0x3FFB
  2796                           pclath	equ	0x3FFA
  2797                           pcl	equ	0x3FF9
  2798                           tblptru	equ	0x3FF8
  2799                           tblptrh	equ	0x3FF7
  2800                           tblptrl	equ	0x3FF6
  2801                           tablat	equ	0x3FF5
  2802                           prodh	equ	0x3FF4
  2803                           prodl	equ	0x3FF3
  2804                           indf0	equ	0x3FEF
  2805                           postinc0	equ	0x3FEE
  2806                           postdec0	equ	0x3FED
  2807                           preinc0	equ	0x3FEC
  2808                           plusw0	equ	0x3FEB
  2809                           fsr0h	equ	0x3FEA
  2810                           fsr0l	equ	0x3FE9
  2811                           wreg	equ	0x3FE8
  2812                           indf1	equ	0x3FE7
  2813                           postinc1	equ	0x3FE6
  2814                           postdec1	equ	0x3FE5
  2815                           preinc1	equ	0x3FE4
  2816                           plusw1	equ	0x3FE3
  2817                           fsr1h	equ	0x3FE2
  2818                           fsr1l	equ	0x3FE1
  2819                           bsr	equ	0x3FE0
  2820                           indf2	equ	0x3FDF
  2821                           postinc2	equ	0x3FDE
  2822                           postdec2	equ	0x3FDD
  2823                           preinc2	equ	0x3FDC
  2824                           plusw2	equ	0x3FDB
  2825                           fsr2h	equ	0x3FDA
  2826                           fsr2l	equ	0x3FD9
  2827                           status	equ	0x3FD8


Data Sizes:
    Strings     161
    Constant    0
    Data        6
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     41      59
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sendCANmessage@message	PTR int  size(2) Largest target is 16
		 -> canRecInt2@message(COMRAM[16]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 22
		 -> STR_13(CODE[6]), STR_12(CODE[5]), STR_11(CODE[6]), STR_10(CODE[5]), 
		 -> STR_9(CODE[6]), STR_8(CODE[16]), STR_7(CODE[17]), STR_6(CODE[8]), 
		 -> STR_5(CODE[20]), STR_4(CODE[15]), STR_3(CODE[17]), STR_2(CODE[18]), 
		 -> STR_1(CODE[22]), 


Critical Paths under _main in COMRAM

    _main->_MenuYesNo
    _MenuYesNo->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _buzzerInt in COMRAM

    None.

Critical Paths under _encInt in COMRAM

    None.

Critical Paths under _adcInt in COMRAM

    None.

Critical Paths under _canRecInt2 in COMRAM

    _canRecInt2->_sendCANmessage

Critical Paths under _canRecInt in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _buzzerInt in BANK0

    None.

Critical Paths under _encInt in BANK0

    None.

Critical Paths under _adcInt in BANK0

    None.

Critical Paths under _canRecInt2 in BANK0

    None.

Critical Paths under _canRecInt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _buzzerInt in BANK1

    None.

Critical Paths under _encInt in BANK1

    None.

Critical Paths under _adcInt in BANK1

    None.

Critical Paths under _canRecInt2 in BANK1

    None.

Critical Paths under _canRecInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _buzzerInt in BANK2

    None.

Critical Paths under _encInt in BANK2

    None.

Critical Paths under _adcInt in BANK2

    None.

Critical Paths under _canRecInt2 in BANK2

    None.

Critical Paths under _canRecInt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _buzzerInt in BANK3

    None.

Critical Paths under _encInt in BANK3

    None.

Critical Paths under _adcInt in BANK3

    None.

Critical Paths under _canRecInt2 in BANK3

    None.

Critical Paths under _canRecInt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _buzzerInt in BANK4

    None.

Critical Paths under _encInt in BANK4

    None.

Critical Paths under _adcInt in BANK4

    None.

Critical Paths under _canRecInt2 in BANK4

    None.

Critical Paths under _canRecInt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _buzzerInt in BANK5

    None.

Critical Paths under _encInt in BANK5

    None.

Critical Paths under _adcInt in BANK5

    None.

Critical Paths under _canRecInt2 in BANK5

    None.

Critical Paths under _canRecInt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _buzzerInt in BANK6

    None.

Critical Paths under _encInt in BANK6

    None.

Critical Paths under _adcInt in BANK6

    None.

Critical Paths under _canRecInt2 in BANK6

    None.

Critical Paths under _canRecInt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _buzzerInt in BANK7

    None.

Critical Paths under _encInt in BANK7

    None.

Critical Paths under _adcInt in BANK7

    None.

Critical Paths under _canRecInt2 in BANK7

    None.

Critical Paths under _canRecInt in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5813
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _MenuYesNo
                         _initBuzzer
                            _initCAN
 ---------------------------------------------------------------------------------
 (1) _initCAN                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initBuzzer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MenuYesNo                                           24    24      0    2802
                                             37 COMRAM     4     4      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _playBuzzer
 ---------------------------------------------------------------------------------
 (2) _playBuzzer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     6     4      2    1198
                                             31 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       3     3      0     120
                                             28 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1    1603
                                             30 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     135
                                             30 COMRAM     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              2     2      0      75
                                             28 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      60
                                             27 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _buzzerInt                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _encInt                                               1     1      0       0
                                              0 COMRAM     1     1      0
                       i2_playBuzzer
 ---------------------------------------------------------------------------------
 (7) i2_playBuzzer                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _adcInt                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _canRecInt2                                          18    18      0     752
                                              9 COMRAM    18    18      0
                     _sendCANmessage
 ---------------------------------------------------------------------------------
 (7) _sendCANmessage                                       8     2      6     698
                                              1 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _canRecInt                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _MenuYesNo
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _playBuzzer
   _initBuzzer
   _initCAN

 _buzzerInt (ROOT)

 _encInt (ROOT)
   i2_playBuzzer

 _adcInt (ROOT)

 _canRecInt2 (ROOT)
   _sendCANmessage

 _canRecInt (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      20        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     29      3B       1       62.1%
BITSFR_9             0      0       0     200        0.0%
SFR_9                0      0       0     200        0.0%
BITSFR_8             0      0       0     200        0.0%
SFR_8                0      0       0     200        0.0%
BITSFR_7             0      0       0     200        0.0%
SFR_7                0      0       0     200        0.0%
BITSFR_6             0      0       0     200        0.0%
SFR_6                0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3B       3        0.0%
DATA                 0      0      3B      21        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Aug 07 14:31:13 2020

               __CFG_CP$OFF 000000        __end_ofi2_playBuzzer 0EF4                 __CFG_LVP$ON 000000  
                       l201 0E82                         l203 0E8C                         l205 0E96  
                       l155 0994                         l244 0B22                         l159 09B0  
                       l199 0E78                         l973 0E8E                         l965 0E7A  
                       l969 0E84                         u407 0EAC                         u290 0B26  
                       u357 0E20                         u367 0E32                         u377 0BF0  
                       u387 0C0A                         u397 0C20                         wreg 003FE8  
             __CFG_BBEN$OFF 000000                __CFG_ZCD$OFF 000000                        l1411 0B80  
                      l1403 0B58                        l1067 0C70                        l1093 0CB8  
                      l1433 0D58                        l1419 0BA8                        l1451 0AE6  
                      l1429 0D34                        l1445 0AB8                        l1439 0A8A  
                      l1535 08E4                        l1457 0AFE                        l1587 0996  
                      STR_1 0801                        STR_2 082B                        STR_3 083D  
                      STR_4 086F                        STR_5 0817                        STR_6 087E  
                      STR_7 084E                        STR_8 085F                        STR_9 0892  
             __CFG_FCMEN$ON 000000           ?_Lcd_Write_String 0020                        _main 08A4  
                      fsr2h 003FDA                        indf2 003FDF                        fsr1l 003FE1  
                      fsr2l 003FD9                        start 00A8          ??_Lcd_Write_String 0022  
           __end_of_Lcd_Cmd 0EBA               __CFG_CSWEN$ON 000000                ___param_bank 000000  
                     ?_main 0001                       STR_10 0898                       STR_11 0886  
                     STR_12 089D                       STR_13 088C               __CFG_WDTE$OFF 000000  
            __CFG_DEBUG$OFF 000000                       i2l190 0CF8                       i2l186 0D24  
                     i2l267 0A82                       i2l188 0CCE                       i2l189 0D22  
                     _TMR0H 003FB7                       _TMR0L 003FB6     __size_of_Lcd_Set_Cursor 00A0  
                     _TRISC 003FC4               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000             __end_of_initCAN 0CC6          __CFG_MCLRE$EXTMCLR 000000  
                     tablat 003FF5        sendCANmessage@length 0006                       status 003FD8  
          __end_of_Lcd_Init 0C5C            __end_of_Lcd_Port 0E9A             __initialization 0D7C  
              __end_of_main 09B2              __CFG_SAFEN$OFF 000000                      ??_main 002A  
            __CFG_PR1WAY$ON 000000          __size_of_Lcd_Clear 000E               __activetblptr 000002  
            __CFG_MVECEN$ON 000000            ??_sendCANmessage 0008                      _ADRESH 003EF0  
                    _ADRESL 003EEF                      _ANSELC 003A60                      _RB2PPS 003A0A  
                    i2l1307 0DDE                      i2l1315 0DFE                      i2l1309 0DE4  
                    i2l1601 0D06              __CFG_WDTCCS$SC 000000                      i2l1595 0CDA  
                    _RXB0D0 003F86                   ??_Lcd_Cmd 001D                      _TXB0D0 0037E6  
                    _TXB0D1 0037E7                      _TXB0D2 0037E8                      _TXB0D3 0037E9  
                    _TXB0D4 0037EA                      _TXB0D5 0037EB                      _TXB0D6 0037EC  
                    _TXB0D7 0037ED     __size_of_Lcd_Write_Char 0038          __size_of_MenuYesNo 00A8  
     __size_ofi2_playBuzzer 000A              __CFG_XINST$OFF 000000                      _adcInt 0EFC  
            __CFG_STVREN$ON 000000                      _encInt 0DC0                      clear_0 0DA4  
                    _status 0038                   ??_initCAN 001C                __pdataCOMRAM 0036  
              __mediumconst 0000       sendCANmessage@message 0004                      tblptrh 003FF7  
                    tblptrl 003FF6                      tblptru 003FF8             Lcd_Set_Cursor@a 0020  
           Lcd_Set_Cursor@b 001F             Lcd_Set_Cursor@y 0022             Lcd_Set_Cursor@z 0021  
              i2_playBuzzer 0EEA                  __accesstop 0060     __end_of__initialization 0DB6  
         __end_of_Lcd_Clear 0EC8               ___rparam_used 000001          __size_of_canRecInt 000E  
            __pcstackCOMRAM 0001              ivt0x8_undefint 00A6                  _canRecInt2 0CC8  
              _ADCvalueLow0 0032                _ADCvalueLow1 002E              _Lcd_Set_Cursor 0B30  
         __end_of_MenuYesNo 0B30                   ?_Lcd_Init 0001                   ?_Lcd_Port 0001  
           __CFG_IVT1WAY$ON 000000                     IVTBASEH 003FD6                     IVTBASEL 003FD5  
                   IVTBASEU 003FD7          __size_of_buzzerInt 000A                     ?_adcInt 0001  
           __CFG_PPS1WAY$ON 000000                     ?_encInt 0001   __size_of_Lcd_Write_String 0052  
    __end_of_Lcd_Set_Cursor 0BD0                     _INT0PPS 003AC0         __CFG_PWRTS$PWRT_OFF 000000  
         __end_of_canRecInt 0ED6                     _OSCCON1 0039D9                  ??_Lcd_Init 001F  
                ??_Lcd_Port 001C              _Lcd_Write_Char 0E04                     _Lcd_Cmd 0E9A  
                 _ADPCHbits 003EF1                     __Hparam 0000                     __Lparam 0000  
__CFG_RSTOSC$HFINTOSC_64MHZ 000000                  _initBuzzer 0E3C             __size_of_adcInt 0002  
           __size_of_encInt 0044                __psmallconst 0800                 ?_canRecInt2 0001  
                   __pcinit 0D7C                     __ramtop 0800             ?_Lcd_Set_Cursor 001F  
                   __ptext0 08A4                     __ptext1 0C5C                     __ptext2 0E3C  
                   __ptext3 0A88                     __ptext4 0ED6                     __ptext5 0D2A  
                   __ptext6 0E04                     __ptext7 0B30                     __ptext8 0BD0  
                   __ptext9 0EBA                     _initCAN 0C5C             __CFG_WRTAPP$OFF 000000  
           __CFG_WRTSAF$OFF 000000           __end_of_buzzerInt 0EEA      __end_of_Lcd_Write_Char 0E3C  
                _playBuzzer 0ED6        end_of_initialization 0DB6               __Lmediumconst 0000  
                _tick_count 002C                     postdec1 003FE5                     postinc0 003FEE  
                 Lcd_Port@a 001C       __CFG_WDTCPS$WDTCPS_31 000000                   _PORTAbits 003FCA  
                 _PORTBbits 003FCB                   _PORTCbits 003FCC                   _TRISAbits 003FC2  
                 _TRISBbits 003FC3            sendCANmessage@id 0002             ?_Lcd_Write_Char 0001  
         Lcd_Write_String@a 0020           Lcd_Write_String@i 0024         __size_of_canRecInt2 0062  
                 _Lcd_Clear 0EBA                 ?_initBuzzer 0001              __end_of_adcInt 0EFE  
          _Lcd_Write_String 0D2A              __end_of_encInt 0E04               __pidataCOMRAM 0EF4  
       start_initialization 0D7C               _ADCvalueHigh0 0034               _ADCvalueHigh1 0030  
                 _MenuYesNo 0A88                 ?_playBuzzer 0001                  ivt0x8_base 0008  
         __size_of_Lcd_Init 008C                 _CANSTATbits 003F8E           __size_of_Lcd_Port 002C  
            _max_tick_count 003A     __size_of_sendCANmessage 00D6            __CFG_LPBOREN$OFF 000000  
                ?_Lcd_Clear 0001                    ??_adcInt 0002                    ??_encInt 0001  
           Lcd_Write_Char@a 001F             Lcd_Write_Char@y 001E                 __pbssCOMRAM 002A  
               _BRGCON1bits 003703                  ?_MenuYesNo 0001                   _canRecInt 0EC8  
       __size_of_initBuzzer 0032                    ?_Lcd_Cmd 0001           canRecInt2@message 000C  
          ??_Lcd_Set_Cursor 0020                ??_canRecInt2 000A         __size_of_playBuzzer 000A  
                  ?_initCAN 0001      __CFG_BBSIZE$BBSIZE_512 000000                 __smallconst 0800  
                ?_canRecInt 0001                   _buzzerInt 0EE0          __end_of_canRecInt2 0D2A  
                  _PIE1bits 003991                    _PIE3bits 003993                    _PIE5bits 003995  
       __CFG_BORV$VBOR_2P45 000000                    Lcd_Cmd@a 001E                    _PIR1bits 0039A1  
                  _PIR3bits 0039A3                    _PIR5bits 0039A5                 ??_Lcd_Clear 001F  
                  _RXF0SIDH 0037A0                    _RXF1SIDH 0037A4                    _TXB0SIDH 0037E1  
                  _RXM0SIDH 0037B8                    _RXM1SIDH 0037BC                  _ADCON0bits 003EF8  
          ??_Lcd_Write_Char 001D                    _Lcd_Init 0BD0                    _Lcd_Port 0E6E  
               ??_MenuYesNo 0026                 _INTCON0bits 003FD2                   copy_data0 0D90  
                _CANCONbits 003F8F               ?i2_playBuzzer 0001                  ?_buzzerInt 0001  
  __end_of_Lcd_Write_String 0D7C              _min_tick_count 002A            __size_of_Lcd_Cmd 0020  
            _sendCANmessage 09B2                    __Hrparam 0000                    __Lrparam 0000  
        __CFG_BOREN$SBORDIS 000000                ??_initBuzzer 001C                  _ANSELAbits 003A40  
                _ANSELBbits 003A50            __size_of_initCAN 006A                  _T0CON0bits 003FB8  
                _T0CON1bits 003FB9                _RXF0SIDLbits 0037A1                    _feedback 0036  
                  __pivt0x8 0008                _RXF1SIDLbits 0037A5                    __ptext10 0E9A  
                  __ptext11 0E6E                    __ptext12 0EE0                    __ptext13 0DC0  
                  __ptext14 0EEA                    __ptext15 0EFC                    __ptext16 0CC8  
                  __ptext17 09B2                    __ptext18 0EC8                 ??_canRecInt 001C  
            ??i2_playBuzzer 0001                ??_playBuzzer 001C          __end_of_initBuzzer 0E6E  
    __end_of_sendCANmessage 0A88               __size_of_main 010E        __CFG_WDTCWS$WDTCWS_7 000000  
              _TXB0SIDLbits 0037E2          __end_of_playBuzzer 0EE0                _RXM0SIDLbits 0037B9  
               _RXB0CONbits 003F80                 _RXB1CONbits 0037F0                _RXM1SIDLbits 0037BD  
        Lcd_Write_Char@temp 001D                    intlevel1 0000                    intlevel2 0000  
               ??_buzzerInt 001C             ?_sendCANmessage 0002                 _TXB0DLCbits 0037E5  
         __CFG_CLKOUTEN$OFF 000000                 _TXB0CONbits 0037E0          Lcd_Set_Cursor@temp 0023  
